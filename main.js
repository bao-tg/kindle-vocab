/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/sql.js/dist/sql-wasm.js
var require_sql_wasm = __commonJS({
  "node_modules/sql.js/dist/sql-wasm.js"(exports, module2) {
    var initSqlJsPromise = void 0;
    var initSqlJs4 = function(moduleConfig) {
      if (initSqlJsPromise) {
        return initSqlJsPromise;
      }
      initSqlJsPromise = new Promise(function(resolveModule, reject) {
        var Module = typeof moduleConfig !== "undefined" ? moduleConfig : {};
        var originalOnAbortFunction = Module["onAbort"];
        Module["onAbort"] = function(errorThatCausedAbort) {
          reject(new Error(errorThatCausedAbort));
          if (originalOnAbortFunction) {
            originalOnAbortFunction(errorThatCausedAbort);
          }
        };
        Module["postRun"] = Module["postRun"] || [];
        Module["postRun"].push(function() {
          resolveModule(Module);
        });
        module2 = void 0;
        var e;
        e || (e = typeof Module !== "undefined" ? Module : {});
        null;
        e.onRuntimeInitialized = function() {
          function a(h, l) {
            this.Qa = h;
            this.db = l;
            this.Oa = 1;
            this.kb = [];
          }
          function b(h, l) {
            this.db = l;
            l = aa(h) + 1;
            this.cb = da(l);
            if (null === this.cb)
              throw Error("Unable to allocate memory for the SQL string");
            k(h, n, this.cb, l);
            this.ib = this.cb;
            this.Za = this.ob = null;
          }
          function c(h) {
            this.filename = "dbfile_" + (4294967295 * Math.random() >>> 0);
            if (null != h) {
              var l = this.filename, q = l ? r("//" + l) : "/";
              l = ea(true, true);
              q = fa(q, (void 0 !== l ? l : 438) & 4095 | 32768, 0);
              if (h) {
                if ("string" === typeof h) {
                  for (var p = Array(h.length), z = 0, N = h.length; z < N; ++z)
                    p[z] = h.charCodeAt(z);
                  h = p;
                }
                ha(q, l | 146);
                p = ia(q, 577);
                ka(p, h, 0, h.length, 0, void 0);
                la(p);
                ha(q, l);
              }
            }
            this.handleError(g(this.filename, d));
            this.db = v(d, "i32");
            hc(this.db);
            this.eb = {};
            this.Wa = {};
          }
          var d = x(4), f = e.cwrap, g = f("sqlite3_open", "number", ["string", "number"]), m = f("sqlite3_close_v2", "number", ["number"]), t = f("sqlite3_exec", "number", ["number", "string", "number", "number", "number"]), w = f("sqlite3_changes", "number", ["number"]), u = f("sqlite3_prepare_v2", "number", [
            "number",
            "string",
            "number",
            "number",
            "number"
          ]), C = f("sqlite3_sql", "string", ["number"]), I = f("sqlite3_normalized_sql", "string", ["number"]), ba = f("sqlite3_prepare_v2", "number", ["number", "number", "number", "number", "number"]), ic = f("sqlite3_bind_text", "number", ["number", "number", "number", "number", "number"]), qb = f("sqlite3_bind_blob", "number", ["number", "number", "number", "number", "number"]), jc = f("sqlite3_bind_double", "number", ["number", "number", "number"]), kc = f("sqlite3_bind_int", "number", ["number", "number", "number"]), lc = f(
            "sqlite3_bind_parameter_index",
            "number",
            ["number", "string"]
          ), mc = f("sqlite3_step", "number", ["number"]), nc = f("sqlite3_errmsg", "string", ["number"]), oc = f("sqlite3_column_count", "number", ["number"]), pc = f("sqlite3_data_count", "number", ["number"]), qc = f("sqlite3_column_double", "number", ["number", "number"]), rb = f("sqlite3_column_text", "string", ["number", "number"]), rc = f("sqlite3_column_blob", "number", ["number", "number"]), sc = f("sqlite3_column_bytes", "number", ["number", "number"]), tc = f("sqlite3_column_type", "number", ["number", "number"]), uc = f("sqlite3_column_name", "string", ["number", "number"]), vc = f("sqlite3_reset", "number", ["number"]), wc = f("sqlite3_clear_bindings", "number", ["number"]), xc = f("sqlite3_finalize", "number", ["number"]), yc = f("sqlite3_create_function_v2", "number", "number string number number number number number number number".split(" ")), zc = f("sqlite3_value_type", "number", ["number"]), Ac = f("sqlite3_value_bytes", "number", ["number"]), Bc = f("sqlite3_value_text", "string", ["number"]), Cc = f("sqlite3_value_blob", "number", ["number"]), Dc = f("sqlite3_value_double", "number", ["number"]), Ec = f("sqlite3_result_double", "", ["number", "number"]), sb = f("sqlite3_result_null", "", ["number"]), Fc = f("sqlite3_result_text", "", ["number", "string", "number", "number"]), Gc = f("sqlite3_result_blob", "", ["number", "number", "number", "number"]), Hc = f("sqlite3_result_int", "", ["number", "number"]), tb = f("sqlite3_result_error", "", ["number", "string", "number"]), hc = f("RegisterExtensionFunctions", "number", ["number"]);
          a.prototype.bind = function(h) {
            if (!this.Qa)
              throw "Statement closed";
            this.reset();
            return Array.isArray(h) ? this.Cb(h) : null != h && "object" === typeof h ? this.Db(h) : true;
          };
          a.prototype.step = function() {
            if (!this.Qa)
              throw "Statement closed";
            this.Oa = 1;
            var h = mc(this.Qa);
            switch (h) {
              case 100:
                return true;
              case 101:
                return false;
              default:
                throw this.db.handleError(h);
            }
          };
          a.prototype.yb = function(h) {
            null == h && (h = this.Oa, this.Oa += 1);
            return qc(this.Qa, h);
          };
          a.prototype.Gb = function(h) {
            null == h && (h = this.Oa, this.Oa += 1);
            h = rb(this.Qa, h);
            if ("function" !== typeof BigInt)
              throw Error("BigInt is not supported");
            return BigInt(h);
          };
          a.prototype.Hb = function(h) {
            null == h && (h = this.Oa, this.Oa += 1);
            return rb(this.Qa, h);
          };
          a.prototype.getBlob = function(h) {
            null == h && (h = this.Oa, this.Oa += 1);
            var l = sc(this.Qa, h);
            h = rc(this.Qa, h);
            for (var q = new Uint8Array(l), p = 0; p < l; p += 1)
              q[p] = y[h + p];
            return q;
          };
          a.prototype.get = function(h, l) {
            l = l || {};
            null != h && this.bind(h) && this.step();
            h = [];
            for (var q = pc(this.Qa), p = 0; p < q; p += 1)
              switch (tc(this.Qa, p)) {
                case 1:
                  var z = l.useBigInt ? this.Gb(p) : this.yb(p);
                  h.push(z);
                  break;
                case 2:
                  h.push(this.yb(p));
                  break;
                case 3:
                  h.push(this.Hb(p));
                  break;
                case 4:
                  h.push(this.getBlob(p));
                  break;
                default:
                  h.push(null);
              }
            return h;
          };
          a.prototype.getColumnNames = function() {
            for (var h = [], l = oc(this.Qa), q = 0; q < l; q += 1)
              h.push(uc(this.Qa, q));
            return h;
          };
          a.prototype.getAsObject = function(h, l) {
            h = this.get(h, l);
            l = this.getColumnNames();
            for (var q = {}, p = 0; p < l.length; p += 1)
              q[l[p]] = h[p];
            return q;
          };
          a.prototype.getSQL = function() {
            return C(this.Qa);
          };
          a.prototype.getNormalizedSQL = function() {
            return I(this.Qa);
          };
          a.prototype.run = function(h) {
            null != h && this.bind(h);
            this.step();
            return this.reset();
          };
          a.prototype.tb = function(h, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            h = ma(h);
            var q = na(h);
            this.kb.push(q);
            this.db.handleError(ic(this.Qa, l, q, h.length - 1, 0));
          };
          a.prototype.Bb = function(h, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            var q = na(h);
            this.kb.push(q);
            this.db.handleError(qb(this.Qa, l, q, h.length, 0));
          };
          a.prototype.sb = function(h, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            this.db.handleError((h === (h | 0) ? kc : jc)(this.Qa, l, h));
          };
          a.prototype.Eb = function(h) {
            null == h && (h = this.Oa, this.Oa += 1);
            qb(this.Qa, h, 0, 0, 0);
          };
          a.prototype.ub = function(h, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            switch (typeof h) {
              case "string":
                this.tb(h, l);
                return;
              case "number":
                this.sb(h, l);
                return;
              case "bigint":
                this.tb(h.toString(), l);
                return;
              case "boolean":
                this.sb(h + 0, l);
                return;
              case "object":
                if (null === h) {
                  this.Eb(l);
                  return;
                }
                if (null != h.length) {
                  this.Bb(h, l);
                  return;
                }
            }
            throw "Wrong API use : tried to bind a value of an unknown type (" + h + ").";
          };
          a.prototype.Db = function(h) {
            var l = this;
            Object.keys(h).forEach(function(q) {
              var p = lc(l.Qa, q);
              0 !== p && l.ub(h[q], p);
            });
            return true;
          };
          a.prototype.Cb = function(h) {
            for (var l = 0; l < h.length; l += 1)
              this.ub(h[l], l + 1);
            return true;
          };
          a.prototype.reset = function() {
            this.freemem();
            return 0 === wc(this.Qa) && 0 === vc(this.Qa);
          };
          a.prototype.freemem = function() {
            for (var h; void 0 !== (h = this.kb.pop()); )
              oa(h);
          };
          a.prototype.free = function() {
            this.freemem();
            var h = 0 === xc(this.Qa);
            delete this.db.eb[this.Qa];
            this.Qa = 0;
            return h;
          };
          b.prototype.next = function() {
            if (null === this.cb)
              return { done: true };
            null !== this.Za && (this.Za.free(), this.Za = null);
            if (!this.db.db)
              throw this.mb(), Error("Database closed");
            var h = pa(), l = x(4);
            qa(d);
            qa(l);
            try {
              this.db.handleError(ba(this.db.db, this.ib, -1, d, l));
              this.ib = v(l, "i32");
              var q = v(d, "i32");
              if (0 === q)
                return this.mb(), { done: true };
              this.Za = new a(q, this.db);
              this.db.eb[q] = this.Za;
              return { value: this.Za, done: false };
            } catch (p) {
              throw this.ob = A(this.ib), this.mb(), p;
            } finally {
              ra(h);
            }
          };
          b.prototype.mb = function() {
            oa(this.cb);
            this.cb = null;
          };
          b.prototype.getRemainingSQL = function() {
            return null !== this.ob ? this.ob : A(this.ib);
          };
          "function" === typeof Symbol && "symbol" === typeof Symbol.iterator && (b.prototype[Symbol.iterator] = function() {
            return this;
          });
          c.prototype.run = function(h, l) {
            if (!this.db)
              throw "Database closed";
            if (l) {
              h = this.prepare(h, l);
              try {
                h.step();
              } finally {
                h.free();
              }
            } else
              this.handleError(t(this.db, h, 0, 0, d));
            return this;
          };
          c.prototype.exec = function(h, l, q) {
            if (!this.db)
              throw "Database closed";
            var p = pa(), z = null;
            try {
              var N = aa(h) + 1, G = x(N);
              k(h, y, G, N);
              var ja = G;
              var ca = x(4);
              for (h = []; 0 !== v(ja, "i8"); ) {
                qa(d);
                qa(ca);
                this.handleError(ba(this.db, ja, -1, d, ca));
                var D = v(d, "i32");
                ja = v(ca, "i32");
                if (0 !== D) {
                  N = null;
                  z = new a(D, this);
                  for (null != l && z.bind(l); z.step(); )
                    null === N && (N = { columns: z.getColumnNames(), values: [] }, h.push(N)), N.values.push(z.get(null, q));
                  z.free();
                }
              }
              return h;
            } catch (O) {
              throw z && z.free(), O;
            } finally {
              ra(p);
            }
          };
          c.prototype.each = function(h, l, q, p, z) {
            "function" === typeof l && (p = q, q = l, l = void 0);
            h = this.prepare(h, l);
            try {
              for (; h.step(); )
                q(h.getAsObject(null, z));
            } finally {
              h.free();
            }
            if ("function" === typeof p)
              return p();
          };
          c.prototype.prepare = function(h, l) {
            qa(d);
            this.handleError(u(this.db, h, -1, d, 0));
            h = v(d, "i32");
            if (0 === h)
              throw "Nothing to prepare";
            var q = new a(h, this);
            null != l && q.bind(l);
            return this.eb[h] = q;
          };
          c.prototype.iterateStatements = function(h) {
            return new b(h, this);
          };
          c.prototype["export"] = function() {
            Object.values(this.eb).forEach(function(l) {
              l.free();
            });
            Object.values(this.Wa).forEach(sa);
            this.Wa = {};
            this.handleError(m(this.db));
            var h = ta(this.filename);
            this.handleError(g(this.filename, d));
            this.db = v(d, "i32");
            return h;
          };
          c.prototype.close = function() {
            null !== this.db && (Object.values(this.eb).forEach(function(h) {
              h.free();
            }), Object.values(this.Wa).forEach(sa), this.Wa = {}, this.handleError(m(this.db)), ua("/" + this.filename), this.db = null);
          };
          c.prototype.handleError = function(h) {
            if (0 === h)
              return null;
            h = nc(this.db);
            throw Error(h);
          };
          c.prototype.getRowsModified = function() {
            return w(this.db);
          };
          c.prototype.create_function = function(h, l) {
            Object.prototype.hasOwnProperty.call(this.Wa, h) && (sa(this.Wa[h]), delete this.Wa[h]);
            var q = va(function(p, z, N) {
              for (var G, ja = [], ca = 0; ca < z; ca += 1) {
                var D = v(N + 4 * ca, "i32"), O = zc(D);
                if (1 === O || 2 === O)
                  D = Dc(D);
                else if (3 === O)
                  D = Bc(D);
                else if (4 === O) {
                  O = D;
                  D = Ac(O);
                  O = Cc(O);
                  for (var wb = new Uint8Array(D), Aa = 0; Aa < D; Aa += 1)
                    wb[Aa] = y[O + Aa];
                  D = wb;
                } else
                  D = null;
                ja.push(D);
              }
              try {
                G = l.apply(null, ja);
              } catch (Kc) {
                tb(p, Kc, -1);
                return;
              }
              switch (typeof G) {
                case "boolean":
                  Hc(p, G ? 1 : 0);
                  break;
                case "number":
                  Ec(p, G);
                  break;
                case "string":
                  Fc(p, G, -1, -1);
                  break;
                case "object":
                  null === G ? sb(p) : null != G.length ? (z = na(G), Gc(p, z, G.length, -1), oa(z)) : tb(p, "Wrong API use : tried to return a value of an unknown type (" + G + ").", -1);
                  break;
                default:
                  sb(p);
              }
            });
            this.Wa[h] = q;
            this.handleError(yc(
              this.db,
              h,
              l.length,
              1,
              0,
              q,
              0,
              0,
              0
            ));
            return this;
          };
          e.Database = c;
        };
        var wa = {}, B;
        for (B in e)
          e.hasOwnProperty(B) && (wa[B] = e[B]);
        var xa = "./this.program", ya = "object" === typeof window, za = "function" === typeof importScripts, Ba = "object" === typeof process && "object" === typeof process.versions && "string" === typeof process.versions.node, E = "", Ca, Da, Ea, Fa, Ga;
        if (Ba)
          E = za ? require("path").dirname(E) + "/" : __dirname + "/", Ca = function(a, b) {
            Fa || (Fa = require("fs"));
            Ga || (Ga = require("path"));
            a = Ga.normalize(a);
            return Fa.readFileSync(a, b ? null : "utf8");
          }, Ea = function(a) {
            a = Ca(a, true);
            a.buffer || (a = new Uint8Array(a));
            a.buffer || F("Assertion failed: undefined");
            return a;
          }, Da = function(a, b, c) {
            Fa || (Fa = require("fs"));
            Ga || (Ga = require("path"));
            a = Ga.normalize(a);
            Fa.readFile(a, function(d, f) {
              d ? c(d) : b(f.buffer);
            });
          }, 1 < process.argv.length && (xa = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), "undefined" !== typeof module2 && (module2.exports = e), e.inspect = function() {
            return "[Emscripten Module object]";
          };
        else if (ya || za)
          za ? E = self.location.href : "undefined" !== typeof document && document.currentScript && (E = document.currentScript.src), E = 0 !== E.indexOf("blob:") ? E.substr(0, E.lastIndexOf("/") + 1) : "", Ca = function(a) {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.send(null);
            return b.responseText;
          }, za && (Ea = function(a) {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), Da = function(a, b, c) {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = function() {
              200 == d.status || 0 == d.status && d.response ? b(d.response) : c();
            };
            d.onerror = c;
            d.send(null);
          };
        var Ha = e.print || console.log.bind(console), H = e.printErr || console.warn.bind(console);
        for (B in wa)
          wa.hasOwnProperty(B) && (e[B] = wa[B]);
        wa = null;
        e.thisProgram && (xa = e.thisProgram);
        var Ia = [], Ja;
        function sa(a) {
          Ja.delete(J.get(a));
          Ia.push(a);
        }
        function va(a) {
          if (!Ja) {
            Ja = /* @__PURE__ */ new WeakMap();
            for (var b = 0; b < J.length; b++) {
              var c = J.get(b);
              c && Ja.set(c, b);
            }
          }
          if (Ja.has(a))
            a = Ja.get(a);
          else {
            if (Ia.length)
              b = Ia.pop();
            else {
              try {
                J.grow(1);
              } catch (g) {
                if (!(g instanceof RangeError))
                  throw g;
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
              }
              b = J.length - 1;
            }
            try {
              J.set(b, a);
            } catch (g) {
              if (!(g instanceof TypeError))
                throw g;
              if ("function" === typeof WebAssembly.Function) {
                var d = { i: "i32", j: "i64", f: "f32", d: "f64" }, f = { parameters: [], results: [] };
                for (c = 1; 4 > c; ++c)
                  f.parameters.push(d["viii"[c]]);
                c = new WebAssembly.Function(f, a);
              } else {
                d = [1, 0, 1, 96];
                f = { i: 127, j: 126, f: 125, d: 124 };
                d.push(3);
                for (c = 0; 3 > c; ++c)
                  d.push(f["iii"[c]]);
                d.push(0);
                d[1] = d.length - 2;
                c = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0].concat(d, [2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0]));
                c = new WebAssembly.Module(c);
                c = new WebAssembly.Instance(c, { e: { f: a } }).exports.f;
              }
              J.set(b, c);
            }
            Ja.set(a, b);
            a = b;
          }
          return a;
        }
        var Ka;
        e.wasmBinary && (Ka = e.wasmBinary);
        var noExitRuntime = e.noExitRuntime || true;
        "object" !== typeof WebAssembly && F("no native wasm support detected");
        function qa(a) {
          var b = "i32";
          "*" === b.charAt(b.length - 1) && (b = "i32");
          switch (b) {
            case "i1":
              y[a >> 0] = 0;
              break;
            case "i8":
              y[a >> 0] = 0;
              break;
            case "i16":
              La[a >> 1] = 0;
              break;
            case "i32":
              K[a >> 2] = 0;
              break;
            case "i64":
              L = [0, (M = 0, 1 <= +Math.abs(M) ? 0 < M ? (Math.min(+Math.floor(M / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((M - +(~~M >>> 0)) / 4294967296) >>> 0 : 0)];
              K[a >> 2] = L[0];
              K[a + 4 >> 2] = L[1];
              break;
            case "float":
              Ma[a >> 2] = 0;
              break;
            case "double":
              Na[a >> 3] = 0;
              break;
            default:
              F("invalid type for setValue: " + b);
          }
        }
        function v(a, b) {
          b = b || "i8";
          "*" === b.charAt(b.length - 1) && (b = "i32");
          switch (b) {
            case "i1":
              return y[a >> 0];
            case "i8":
              return y[a >> 0];
            case "i16":
              return La[a >> 1];
            case "i32":
              return K[a >> 2];
            case "i64":
              return K[a >> 2];
            case "float":
              return Ma[a >> 2];
            case "double":
              return Na[a >> 3];
            default:
              F("invalid type for getValue: " + b);
          }
          return null;
        }
        var Oa, Pa = false;
        function Qa(a) {
          var b = e["_" + a];
          b || F("Assertion failed: Cannot call unknown function " + (a + ", make sure it is exported"));
          return b;
        }
        function Ra(a, b, c, d) {
          var f = { string: function(u) {
            var C = 0;
            if (null !== u && void 0 !== u && 0 !== u) {
              var I = (u.length << 2) + 1;
              C = x(I);
              k(u, n, C, I);
            }
            return C;
          }, array: function(u) {
            var C = x(u.length);
            y.set(u, C);
            return C;
          } };
          a = Qa(a);
          var g = [], m = 0;
          if (d)
            for (var t = 0; t < d.length; t++) {
              var w = f[c[t]];
              w ? (0 === m && (m = pa()), g[t] = w(d[t])) : g[t] = d[t];
            }
          c = a.apply(null, g);
          return c = function(u) {
            0 !== m && ra(m);
            return "string" === b ? A(u) : "boolean" === b ? !!u : u;
          }(c);
        }
        var Sa = 0, Ta = 1;
        function na(a) {
          var b = Sa == Ta ? x(a.length) : da(a.length);
          a.subarray || a.slice ? n.set(a, b) : n.set(new Uint8Array(a), b);
          return b;
        }
        var Ua = "undefined" !== typeof TextDecoder ? new TextDecoder("utf8") : void 0;
        function Va(a, b, c) {
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.subarray && Ua)
            return Ua.decode(a.subarray(b, c));
          for (d = ""; b < c; ) {
            var f = a[b++];
            if (f & 128) {
              var g = a[b++] & 63;
              if (192 == (f & 224))
                d += String.fromCharCode((f & 31) << 6 | g);
              else {
                var m = a[b++] & 63;
                f = 224 == (f & 240) ? (f & 15) << 12 | g << 6 | m : (f & 7) << 18 | g << 12 | m << 6 | a[b++] & 63;
                65536 > f ? d += String.fromCharCode(f) : (f -= 65536, d += String.fromCharCode(55296 | f >> 10, 56320 | f & 1023));
              }
            } else
              d += String.fromCharCode(f);
          }
          return d;
        }
        function A(a, b) {
          return a ? Va(n, a, b) : "";
        }
        function k(a, b, c, d) {
          if (!(0 < d))
            return 0;
          var f = c;
          d = c + d - 1;
          for (var g = 0; g < a.length; ++g) {
            var m = a.charCodeAt(g);
            if (55296 <= m && 57343 >= m) {
              var t = a.charCodeAt(++g);
              m = 65536 + ((m & 1023) << 10) | t & 1023;
            }
            if (127 >= m) {
              if (c >= d)
                break;
              b[c++] = m;
            } else {
              if (2047 >= m) {
                if (c + 1 >= d)
                  break;
                b[c++] = 192 | m >> 6;
              } else {
                if (65535 >= m) {
                  if (c + 2 >= d)
                    break;
                  b[c++] = 224 | m >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++] = 240 | m >> 18;
                  b[c++] = 128 | m >> 12 & 63;
                }
                b[c++] = 128 | m >> 6 & 63;
              }
              b[c++] = 128 | m & 63;
            }
          }
          b[c] = 0;
          return c - f;
        }
        function aa(a) {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            55296 <= d && 57343 >= d && (d = 65536 + ((d & 1023) << 10) | a.charCodeAt(++c) & 1023);
            127 >= d ? ++b : b = 2047 >= d ? b + 2 : 65535 >= d ? b + 3 : b + 4;
          }
          return b;
        }
        function Wa(a) {
          var b = aa(a) + 1, c = da(b);
          c && k(a, y, c, b);
          return c;
        }
        var Xa, y, n, La, K, Ma, Na;
        function Ya() {
          var a = Oa.buffer;
          Xa = a;
          e.HEAP8 = y = new Int8Array(a);
          e.HEAP16 = La = new Int16Array(a);
          e.HEAP32 = K = new Int32Array(a);
          e.HEAPU8 = n = new Uint8Array(a);
          e.HEAPU16 = new Uint16Array(a);
          e.HEAPU32 = new Uint32Array(a);
          e.HEAPF32 = Ma = new Float32Array(a);
          e.HEAPF64 = Na = new Float64Array(a);
        }
        var J, Za = [], $a = [], ab = [];
        function bb() {
          var a = e.preRun.shift();
          Za.unshift(a);
        }
        var cb = 0, db = null, eb = null;
        e.preloadedImages = {};
        e.preloadedAudios = {};
        function F(a) {
          if (e.onAbort)
            e.onAbort(a);
          H(a);
          Pa = true;
          throw new WebAssembly.RuntimeError("abort(" + a + "). Build with -s ASSERTIONS=1 for more info.");
        }
        function fb() {
          return P.startsWith("data:application/octet-stream;base64,");
        }
        var P;
        P = "sql-wasm.wasm";
        if (!fb()) {
          var gb = P;
          P = e.locateFile ? e.locateFile(gb, E) : E + gb;
        }
        function hb() {
          var a = P;
          try {
            if (a == P && Ka)
              return new Uint8Array(Ka);
            if (Ea)
              return Ea(a);
            throw "both async and sync fetching of the wasm failed";
          } catch (b) {
            F(b);
          }
        }
        function ib() {
          if (!Ka && (ya || za)) {
            if ("function" === typeof fetch && !P.startsWith("file://"))
              return fetch(P, { credentials: "same-origin" }).then(function(a) {
                if (!a.ok)
                  throw "failed to load wasm binary file at '" + P + "'";
                return a.arrayBuffer();
              }).catch(function() {
                return hb();
              });
            if (Da)
              return new Promise(function(a, b) {
                Da(P, function(c) {
                  a(new Uint8Array(c));
                }, b);
              });
          }
          return Promise.resolve().then(function() {
            return hb();
          });
        }
        var M, L;
        function jb(a) {
          for (; 0 < a.length; ) {
            var b = a.shift();
            if ("function" == typeof b)
              b(e);
            else {
              var c = b.Qb;
              "number" === typeof c ? void 0 === b.lb ? J.get(c)() : J.get(c)(b.lb) : c(void 0 === b.lb ? null : b.lb);
            }
          }
        }
        function kb(a) {
          return a.replace(/\b_Z[\w\d_]+/g, function(b) {
            return b === b ? b : b + " [" + b + "]";
          });
        }
        function lb() {
          function a(m) {
            return (m = m.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? m[1] : "GMT";
          }
          var b = new Date().getFullYear(), c = new Date(b, 0, 1), d = new Date(b, 6, 1);
          b = c.getTimezoneOffset();
          var f = d.getTimezoneOffset(), g = Math.max(b, f);
          K[mb() >> 2] = 60 * g;
          K[nb() >> 2] = Number(b != f);
          c = a(c);
          d = a(d);
          c = Wa(c);
          d = Wa(d);
          f < b ? (K[ob() >> 2] = c, K[ob() + 4 >> 2] = d) : (K[ob() >> 2] = d, K[ob() + 4 >> 2] = c);
        }
        var pb;
        function ub(a, b) {
          for (var c = 0, d = a.length - 1; 0 <= d; d--) {
            var f = a[d];
            "." === f ? a.splice(d, 1) : ".." === f ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
          }
          if (b)
            for (; c; c--)
              a.unshift("..");
          return a;
        }
        function r(a) {
          var b = "/" === a.charAt(0), c = "/" === a.substr(-1);
          (a = ub(a.split("/").filter(function(d) {
            return !!d;
          }), !b).join("/")) || b || (a = ".");
          a && c && (a += "/");
          return (b ? "/" : "") + a;
        }
        function vb(a) {
          var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);
          a = b[0];
          b = b[1];
          if (!a && !b)
            return ".";
          b && (b = b.substr(0, b.length - 1));
          return a + b;
        }
        function xb(a) {
          if ("/" === a)
            return "/";
          a = r(a);
          a = a.replace(/\/$/, "");
          var b = a.lastIndexOf("/");
          return -1 === b ? a : a.substr(b + 1);
        }
        function yb() {
          if ("object" === typeof crypto && "function" === typeof crypto.getRandomValues) {
            var a = new Uint8Array(1);
            return function() {
              crypto.getRandomValues(a);
              return a[0];
            };
          }
          if (Ba)
            try {
              var b = require("crypto");
              return function() {
                return b.randomBytes(1)[0];
              };
            } catch (c) {
            }
          return function() {
            F("randomDevice");
          };
        }
        function zb() {
          for (var a = "", b = false, c = arguments.length - 1; -1 <= c && !b; c--) {
            b = 0 <= c ? arguments[c] : "/";
            if ("string" !== typeof b)
              throw new TypeError("Arguments to path.resolve must be strings");
            if (!b)
              return "";
            a = b + "/" + a;
            b = "/" === b.charAt(0);
          }
          a = ub(a.split("/").filter(function(d) {
            return !!d;
          }), !b).join("/");
          return (b ? "/" : "") + a || ".";
        }
        var Ab = [];
        function Bb(a, b) {
          Ab[a] = { input: [], output: [], bb: b };
          Cb(a, Db);
        }
        var Db = { open: function(a) {
          var b = Ab[a.node.rdev];
          if (!b)
            throw new Q(43);
          a.tty = b;
          a.seekable = false;
        }, close: function(a) {
          a.tty.bb.flush(a.tty);
        }, flush: function(a) {
          a.tty.bb.flush(a.tty);
        }, read: function(a, b, c, d) {
          if (!a.tty || !a.tty.bb.zb)
            throw new Q(60);
          for (var f = 0, g = 0; g < d; g++) {
            try {
              var m = a.tty.bb.zb(a.tty);
            } catch (t) {
              throw new Q(29);
            }
            if (void 0 === m && 0 === f)
              throw new Q(6);
            if (null === m || void 0 === m)
              break;
            f++;
            b[c + g] = m;
          }
          f && (a.node.timestamp = Date.now());
          return f;
        }, write: function(a, b, c, d) {
          if (!a.tty || !a.tty.bb.pb)
            throw new Q(60);
          try {
            for (var f = 0; f < d; f++)
              a.tty.bb.pb(a.tty, b[c + f]);
          } catch (g) {
            throw new Q(29);
          }
          d && (a.node.timestamp = Date.now());
          return f;
        } }, Eb = { zb: function(a) {
          if (!a.input.length) {
            var b = null;
            if (Ba) {
              var c = Buffer.alloc(256), d = 0;
              try {
                d = Fa.readSync(process.stdin.fd, c, 0, 256, null);
              } catch (f) {
                if (f.toString().includes("EOF"))
                  d = 0;
                else
                  throw f;
              }
              0 < d ? b = c.slice(0, d).toString("utf-8") : b = null;
            } else
              "undefined" != typeof window && "function" == typeof window.prompt ? (b = window.prompt("Input: "), null !== b && (b += "\n")) : "function" == typeof readline && (b = readline(), null !== b && (b += "\n"));
            if (!b)
              return null;
            a.input = ma(b, true);
          }
          return a.input.shift();
        }, pb: function(a, b) {
          null === b || 10 === b ? (Ha(Va(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
        }, flush: function(a) {
          a.output && 0 < a.output.length && (Ha(Va(a.output, 0)), a.output = []);
        } }, Fb = { pb: function(a, b) {
          null === b || 10 === b ? (H(Va(a.output, 0)), a.output = []) : 0 != b && a.output.push(b);
        }, flush: function(a) {
          a.output && 0 < a.output.length && (H(Va(a.output, 0)), a.output = []);
        } };
        function Gb(a) {
          a = 65536 * Math.ceil(a / 65536);
          var b = Hb(65536, a);
          if (!b)
            return 0;
          n.fill(0, b, b + a);
          return b;
        }
        var R = { Ua: null, Va: function() {
          return R.createNode(null, "/", 16895, 0);
        }, createNode: function(a, b, c, d) {
          if (24576 === (c & 61440) || 4096 === (c & 61440))
            throw new Q(63);
          R.Ua || (R.Ua = { dir: { node: { Ta: R.La.Ta, Sa: R.La.Sa, lookup: R.La.lookup, fb: R.La.fb, rename: R.La.rename, unlink: R.La.unlink, rmdir: R.La.rmdir, readdir: R.La.readdir, symlink: R.La.symlink }, stream: { Ya: R.Ma.Ya } }, file: { node: { Ta: R.La.Ta, Sa: R.La.Sa }, stream: { Ya: R.Ma.Ya, read: R.Ma.read, write: R.Ma.write, rb: R.Ma.rb, gb: R.Ma.gb, hb: R.Ma.hb } }, link: { node: {
            Ta: R.La.Ta,
            Sa: R.La.Sa,
            readlink: R.La.readlink
          }, stream: {} }, vb: { node: { Ta: R.La.Ta, Sa: R.La.Sa }, stream: Ib } });
          c = Jb(a, b, c, d);
          S(c.mode) ? (c.La = R.Ua.dir.node, c.Ma = R.Ua.dir.stream, c.Na = {}) : 32768 === (c.mode & 61440) ? (c.La = R.Ua.file.node, c.Ma = R.Ua.file.stream, c.Ra = 0, c.Na = null) : 40960 === (c.mode & 61440) ? (c.La = R.Ua.link.node, c.Ma = R.Ua.link.stream) : 8192 === (c.mode & 61440) && (c.La = R.Ua.vb.node, c.Ma = R.Ua.vb.stream);
          c.timestamp = Date.now();
          a && (a.Na[b] = c, a.timestamp = c.timestamp);
          return c;
        }, Rb: function(a) {
          return a.Na ? a.Na.subarray ? a.Na.subarray(0, a.Ra) : new Uint8Array(a.Na) : new Uint8Array(0);
        }, wb: function(a, b) {
          var c = a.Na ? a.Na.length : 0;
          c >= b || (b = Math.max(b, c * (1048576 > c ? 2 : 1.125) >>> 0), 0 != c && (b = Math.max(b, 256)), c = a.Na, a.Na = new Uint8Array(b), 0 < a.Ra && a.Na.set(c.subarray(0, a.Ra), 0));
        }, Nb: function(a, b) {
          if (a.Ra != b)
            if (0 == b)
              a.Na = null, a.Ra = 0;
            else {
              var c = a.Na;
              a.Na = new Uint8Array(b);
              c && a.Na.set(c.subarray(0, Math.min(b, a.Ra)));
              a.Ra = b;
            }
        }, La: {
          Ta: function(a) {
            var b = {};
            b.dev = 8192 === (a.mode & 61440) ? a.id : 1;
            b.ino = a.id;
            b.mode = a.mode;
            b.nlink = 1;
            b.uid = 0;
            b.gid = 0;
            b.rdev = a.rdev;
            S(a.mode) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.Ra : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;
            b.atime = new Date(a.timestamp);
            b.mtime = new Date(a.timestamp);
            b.ctime = new Date(a.timestamp);
            b.Fb = 4096;
            b.blocks = Math.ceil(b.size / b.Fb);
            return b;
          },
          Sa: function(a, b) {
            void 0 !== b.mode && (a.mode = b.mode);
            void 0 !== b.timestamp && (a.timestamp = b.timestamp);
            void 0 !== b.size && R.Nb(a, b.size);
          },
          lookup: function() {
            throw Kb[44];
          },
          fb: function(a, b, c, d) {
            return R.createNode(a, b, c, d);
          },
          rename: function(a, b, c) {
            if (S(a.mode)) {
              try {
                var d = Lb(b, c);
              } catch (g) {
              }
              if (d)
                for (var f in d.Na)
                  throw new Q(55);
            }
            delete a.parent.Na[a.name];
            a.parent.timestamp = Date.now();
            a.name = c;
            b.Na[c] = a;
            b.timestamp = a.parent.timestamp;
            a.parent = b;
          },
          unlink: function(a, b) {
            delete a.Na[b];
            a.timestamp = Date.now();
          },
          rmdir: function(a, b) {
            var c = Lb(a, b), d;
            for (d in c.Na)
              throw new Q(55);
            delete a.Na[b];
            a.timestamp = Date.now();
          },
          readdir: function(a) {
            var b = [".", ".."], c;
            for (c in a.Na)
              a.Na.hasOwnProperty(c) && b.push(c);
            return b;
          },
          symlink: function(a, b, c) {
            a = R.createNode(a, b, 41471, 0);
            a.link = c;
            return a;
          },
          readlink: function(a) {
            if (40960 !== (a.mode & 61440))
              throw new Q(28);
            return a.link;
          }
        }, Ma: { read: function(a, b, c, d, f) {
          var g = a.node.Na;
          if (f >= a.node.Ra)
            return 0;
          a = Math.min(a.node.Ra - f, d);
          if (8 < a && g.subarray)
            b.set(g.subarray(f, f + a), c);
          else
            for (d = 0; d < a; d++)
              b[c + d] = g[f + d];
          return a;
        }, write: function(a, b, c, d, f, g) {
          b.buffer === y.buffer && (g = false);
          if (!d)
            return 0;
          a = a.node;
          a.timestamp = Date.now();
          if (b.subarray && (!a.Na || a.Na.subarray)) {
            if (g)
              return a.Na = b.subarray(c, c + d), a.Ra = d;
            if (0 === a.Ra && 0 === f)
              return a.Na = b.slice(c, c + d), a.Ra = d;
            if (f + d <= a.Ra)
              return a.Na.set(b.subarray(c, c + d), f), d;
          }
          R.wb(a, f + d);
          if (a.Na.subarray && b.subarray)
            a.Na.set(b.subarray(c, c + d), f);
          else
            for (g = 0; g < d; g++)
              a.Na[f + g] = b[c + g];
          a.Ra = Math.max(a.Ra, f + d);
          return d;
        }, Ya: function(a, b, c) {
          1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.Ra);
          if (0 > b)
            throw new Q(28);
          return b;
        }, rb: function(a, b, c) {
          R.wb(a.node, b + c);
          a.node.Ra = Math.max(a.node.Ra, b + c);
        }, gb: function(a, b, c, d, f, g) {
          if (0 !== b)
            throw new Q(28);
          if (32768 !== (a.node.mode & 61440))
            throw new Q(43);
          a = a.node.Na;
          if (g & 2 || a.buffer !== Xa) {
            if (0 < d || d + c < a.length)
              a.subarray ? a = a.subarray(d, d + c) : a = Array.prototype.slice.call(a, d, d + c);
            d = true;
            c = Gb(c);
            if (!c)
              throw new Q(48);
            y.set(a, c);
          } else
            d = false, c = a.byteOffset;
          return { Mb: c, jb: d };
        }, hb: function(a, b, c, d, f) {
          if (32768 !== (a.node.mode & 61440))
            throw new Q(43);
          if (f & 2)
            return 0;
          R.Ma.write(a, b, 0, d, c, false);
          return 0;
        } } }, Mb = null, Nb = {}, T = [], Ob = 1, U = null, Pb = true, V = {}, Q = null, Kb = {};
        function W(a, b) {
          a = zb("/", a);
          b = b || {};
          if (!a)
            return { path: "", node: null };
          var c = { xb: true, qb: 0 }, d;
          for (d in c)
            void 0 === b[d] && (b[d] = c[d]);
          if (8 < b.qb)
            throw new Q(32);
          a = ub(a.split("/").filter(function(m) {
            return !!m;
          }), false);
          var f = Mb;
          c = "/";
          for (d = 0; d < a.length; d++) {
            var g = d === a.length - 1;
            if (g && b.parent)
              break;
            f = Lb(f, a[d]);
            c = r(c + "/" + a[d]);
            f.$a && (!g || g && b.xb) && (f = f.$a.root);
            if (!g || b.Xa) {
              for (g = 0; 40960 === (f.mode & 61440); )
                if (f = Qb(c), c = zb(vb(c), f), f = W(c, { qb: b.qb }).node, 40 < g++)
                  throw new Q(32);
            }
          }
          return { path: c, node: f };
        }
        function Rb(a) {
          for (var b; ; ) {
            if (a === a.parent)
              return a = a.Va.Ab, b ? "/" !== a[a.length - 1] ? a + "/" + b : a + b : a;
            b = b ? a.name + "/" + b : a.name;
            a = a.parent;
          }
        }
        function Sb(a, b) {
          for (var c = 0, d = 0; d < b.length; d++)
            c = (c << 5) - c + b.charCodeAt(d) | 0;
          return (a + c >>> 0) % U.length;
        }
        function Tb(a) {
          var b = Sb(a.parent.id, a.name);
          if (U[b] === a)
            U[b] = a.ab;
          else
            for (b = U[b]; b; ) {
              if (b.ab === a) {
                b.ab = a.ab;
                break;
              }
              b = b.ab;
            }
        }
        function Lb(a, b) {
          var c;
          if (c = (c = Ub(a, "x")) ? c : a.La.lookup ? 0 : 2)
            throw new Q(c, a);
          for (c = U[Sb(a.id, b)]; c; c = c.ab) {
            var d = c.name;
            if (c.parent.id === a.id && d === b)
              return c;
          }
          return a.La.lookup(a, b);
        }
        function Jb(a, b, c, d) {
          a = new Vb(a, b, c, d);
          b = Sb(a.parent.id, a.name);
          a.ab = U[b];
          return U[b] = a;
        }
        function S(a) {
          return 16384 === (a & 61440);
        }
        var Wb = { r: 0, "r+": 2, w: 577, "w+": 578, a: 1089, "a+": 1090 };
        function Xb(a) {
          var b = ["r", "w", "rw"][a & 3];
          a & 512 && (b += "w");
          return b;
        }
        function Ub(a, b) {
          if (Pb)
            return 0;
          if (!b.includes("r") || a.mode & 292) {
            if (b.includes("w") && !(a.mode & 146) || b.includes("x") && !(a.mode & 73))
              return 2;
          } else
            return 2;
          return 0;
        }
        function Yb(a, b) {
          try {
            return Lb(a, b), 20;
          } catch (c) {
          }
          return Ub(a, "wx");
        }
        function Zb(a, b, c) {
          try {
            var d = Lb(a, b);
          } catch (f) {
            return f.Pa;
          }
          if (a = Ub(a, "wx"))
            return a;
          if (c) {
            if (!S(d.mode))
              return 54;
            if (d === d.parent || "/" === Rb(d))
              return 10;
          } else if (S(d.mode))
            return 31;
          return 0;
        }
        function $b(a) {
          var b = 4096;
          for (a = a || 0; a <= b; a++)
            if (!T[a])
              return a;
          throw new Q(33);
        }
        function ac(a, b) {
          bc || (bc = function() {
          }, bc.prototype = {});
          var c = new bc(), d;
          for (d in a)
            c[d] = a[d];
          a = c;
          b = $b(b);
          a.fd = b;
          return T[b] = a;
        }
        var Ib = { open: function(a) {
          a.Ma = Nb[a.node.rdev].Ma;
          a.Ma.open && a.Ma.open(a);
        }, Ya: function() {
          throw new Q(70);
        } };
        function Cb(a, b) {
          Nb[a] = { Ma: b };
        }
        function cc(a, b) {
          var c = "/" === b, d = !b;
          if (c && Mb)
            throw new Q(10);
          if (!c && !d) {
            var f = W(b, { xb: false });
            b = f.path;
            f = f.node;
            if (f.$a)
              throw new Q(10);
            if (!S(f.mode))
              throw new Q(54);
          }
          b = { type: a, Sb: {}, Ab: b, Kb: [] };
          a = a.Va(b);
          a.Va = b;
          b.root = a;
          c ? Mb = a : f && (f.$a = b, f.Va && f.Va.Kb.push(b));
        }
        function fa(a, b, c) {
          var d = W(a, { parent: true }).node;
          a = xb(a);
          if (!a || "." === a || ".." === a)
            throw new Q(28);
          var f = Yb(d, a);
          if (f)
            throw new Q(f);
          if (!d.La.fb)
            throw new Q(63);
          return d.La.fb(d, a, b, c);
        }
        function X(a, b) {
          return fa(a, (void 0 !== b ? b : 511) & 1023 | 16384, 0);
        }
        function dc(a, b, c) {
          "undefined" === typeof c && (c = b, b = 438);
          fa(a, b | 8192, c);
        }
        function ec(a, b) {
          if (!zb(a))
            throw new Q(44);
          var c = W(b, { parent: true }).node;
          if (!c)
            throw new Q(44);
          b = xb(b);
          var d = Yb(c, b);
          if (d)
            throw new Q(d);
          if (!c.La.symlink)
            throw new Q(63);
          c.La.symlink(c, b, a);
        }
        function ua(a) {
          var b = W(a, { parent: true }).node, c = xb(a), d = Lb(b, c), f = Zb(b, c, false);
          if (f)
            throw new Q(f);
          if (!b.La.unlink)
            throw new Q(63);
          if (d.$a)
            throw new Q(10);
          try {
            V.willDeletePath && V.willDeletePath(a);
          } catch (g) {
            H("FS.trackingDelegate['willDeletePath']('" + a + "') threw an exception: " + g.message);
          }
          b.La.unlink(b, c);
          Tb(d);
          try {
            if (V.onDeletePath)
              V.onDeletePath(a);
          } catch (g) {
            H("FS.trackingDelegate['onDeletePath']('" + a + "') threw an exception: " + g.message);
          }
        }
        function Qb(a) {
          a = W(a).node;
          if (!a)
            throw new Q(44);
          if (!a.La.readlink)
            throw new Q(28);
          return zb(Rb(a.parent), a.La.readlink(a));
        }
        function fc(a, b) {
          a = W(a, { Xa: !b }).node;
          if (!a)
            throw new Q(44);
          if (!a.La.Ta)
            throw new Q(63);
          return a.La.Ta(a);
        }
        function gc(a) {
          return fc(a, true);
        }
        function ha(a, b) {
          a = "string" === typeof a ? W(a, { Xa: true }).node : a;
          if (!a.La.Sa)
            throw new Q(63);
          a.La.Sa(a, { mode: b & 4095 | a.mode & -4096, timestamp: Date.now() });
        }
        function Ic(a) {
          a = "string" === typeof a ? W(a, { Xa: true }).node : a;
          if (!a.La.Sa)
            throw new Q(63);
          a.La.Sa(a, { timestamp: Date.now() });
        }
        function Jc(a, b) {
          if (0 > b)
            throw new Q(28);
          a = "string" === typeof a ? W(a, { Xa: true }).node : a;
          if (!a.La.Sa)
            throw new Q(63);
          if (S(a.mode))
            throw new Q(31);
          if (32768 !== (a.mode & 61440))
            throw new Q(28);
          var c = Ub(a, "w");
          if (c)
            throw new Q(c);
          a.La.Sa(a, { size: b, timestamp: Date.now() });
        }
        function ia(a, b, c, d) {
          if ("" === a)
            throw new Q(44);
          if ("string" === typeof b) {
            var f = Wb[b];
            if ("undefined" === typeof f)
              throw Error("Unknown file open mode: " + b);
            b = f;
          }
          c = b & 64 ? ("undefined" === typeof c ? 438 : c) & 4095 | 32768 : 0;
          if ("object" === typeof a)
            var g = a;
          else {
            a = r(a);
            try {
              g = W(a, { Xa: !(b & 131072) }).node;
            } catch (m) {
            }
          }
          f = false;
          if (b & 64)
            if (g) {
              if (b & 128)
                throw new Q(20);
            } else
              g = fa(a, c, 0), f = true;
          if (!g)
            throw new Q(44);
          8192 === (g.mode & 61440) && (b &= -513);
          if (b & 65536 && !S(g.mode))
            throw new Q(54);
          if (!f && (c = g ? 40960 === (g.mode & 61440) ? 32 : S(g.mode) && ("r" !== Xb(b) || b & 512) ? 31 : Ub(g, Xb(b)) : 44))
            throw new Q(c);
          b & 512 && Jc(g, 0);
          b &= -131713;
          d = ac({ node: g, path: Rb(g), flags: b, seekable: true, position: 0, Ma: g.Ma, Pb: [], error: false }, d);
          d.Ma.open && d.Ma.open(d);
          !e.logReadFiles || b & 1 || (Lc || (Lc = {}), a in Lc || (Lc[a] = 1, H("FS.trackingDelegate error on read file: " + a)));
          try {
            V.onOpenFile && (g = 0, 1 !== (b & 2097155) && (g |= 1), 0 !== (b & 2097155) && (g |= 2), V.onOpenFile(a, g));
          } catch (m) {
            H("FS.trackingDelegate['onOpenFile']('" + a + "', flags) threw an exception: " + m.message);
          }
          return d;
        }
        function la(a) {
          if (null === a.fd)
            throw new Q(8);
          a.nb && (a.nb = null);
          try {
            a.Ma.close && a.Ma.close(a);
          } catch (b) {
            throw b;
          } finally {
            T[a.fd] = null;
          }
          a.fd = null;
        }
        function Mc(a, b, c) {
          if (null === a.fd)
            throw new Q(8);
          if (!a.seekable || !a.Ma.Ya)
            throw new Q(70);
          if (0 != c && 1 != c && 2 != c)
            throw new Q(28);
          a.position = a.Ma.Ya(a, b, c);
          a.Pb = [];
        }
        function Nc(a, b, c, d, f) {
          if (0 > d || 0 > f)
            throw new Q(28);
          if (null === a.fd)
            throw new Q(8);
          if (1 === (a.flags & 2097155))
            throw new Q(8);
          if (S(a.node.mode))
            throw new Q(31);
          if (!a.Ma.read)
            throw new Q(28);
          var g = "undefined" !== typeof f;
          if (!g)
            f = a.position;
          else if (!a.seekable)
            throw new Q(70);
          b = a.Ma.read(a, b, c, d, f);
          g || (a.position += b);
          return b;
        }
        function ka(a, b, c, d, f, g) {
          if (0 > d || 0 > f)
            throw new Q(28);
          if (null === a.fd)
            throw new Q(8);
          if (0 === (a.flags & 2097155))
            throw new Q(8);
          if (S(a.node.mode))
            throw new Q(31);
          if (!a.Ma.write)
            throw new Q(28);
          a.seekable && a.flags & 1024 && Mc(a, 0, 2);
          var m = "undefined" !== typeof f;
          if (!m)
            f = a.position;
          else if (!a.seekable)
            throw new Q(70);
          b = a.Ma.write(a, b, c, d, f, g);
          m || (a.position += b);
          try {
            if (a.path && V.onWriteToFile)
              V.onWriteToFile(a.path);
          } catch (t) {
            H("FS.trackingDelegate['onWriteToFile']('" + a.path + "') threw an exception: " + t.message);
          }
          return b;
        }
        function ta(a) {
          var b = { encoding: "binary" };
          b = b || {};
          b.flags = b.flags || 0;
          b.encoding = b.encoding || "binary";
          if ("utf8" !== b.encoding && "binary" !== b.encoding)
            throw Error('Invalid encoding type "' + b.encoding + '"');
          var c, d = ia(a, b.flags);
          a = fc(a).size;
          var f = new Uint8Array(a);
          Nc(d, f, 0, a, 0);
          "utf8" === b.encoding ? c = Va(f, 0) : "binary" === b.encoding && (c = f);
          la(d);
          return c;
        }
        function Oc() {
          Q || (Q = function(a, b) {
            this.node = b;
            this.Ob = function(c) {
              this.Pa = c;
            };
            this.Ob(a);
            this.message = "FS error";
          }, Q.prototype = Error(), Q.prototype.constructor = Q, [44].forEach(function(a) {
            Kb[a] = new Q(a);
            Kb[a].stack = "<generic error, no stack>";
          }));
        }
        var Pc;
        function ea(a, b) {
          var c = 0;
          a && (c |= 365);
          b && (c |= 146);
          return c;
        }
        function Qc(a, b, c) {
          a = r("/dev/" + a);
          var d = ea(!!b, !!c);
          Rc || (Rc = 64);
          var f = Rc++ << 8 | 0;
          Cb(f, { open: function(g) {
            g.seekable = false;
          }, close: function() {
            c && c.buffer && c.buffer.length && c(10);
          }, read: function(g, m, t, w) {
            for (var u = 0, C = 0; C < w; C++) {
              try {
                var I = b();
              } catch (ba) {
                throw new Q(29);
              }
              if (void 0 === I && 0 === u)
                throw new Q(6);
              if (null === I || void 0 === I)
                break;
              u++;
              m[t + C] = I;
            }
            u && (g.node.timestamp = Date.now());
            return u;
          }, write: function(g, m, t, w) {
            for (var u = 0; u < w; u++)
              try {
                c(m[t + u]);
              } catch (C) {
                throw new Q(29);
              }
            w && (g.node.timestamp = Date.now());
            return u;
          } });
          dc(a, d, f);
        }
        var Rc, Y = {}, bc, Lc, Sc = {};
        function Tc(a, b, c) {
          try {
            var d = a(b);
          } catch (f) {
            if (f && f.node && r(b) !== r(Rb(f.node)))
              return -54;
            throw f;
          }
          K[c >> 2] = d.dev;
          K[c + 4 >> 2] = 0;
          K[c + 8 >> 2] = d.ino;
          K[c + 12 >> 2] = d.mode;
          K[c + 16 >> 2] = d.nlink;
          K[c + 20 >> 2] = d.uid;
          K[c + 24 >> 2] = d.gid;
          K[c + 28 >> 2] = d.rdev;
          K[c + 32 >> 2] = 0;
          L = [d.size >>> 0, (M = d.size, 1 <= +Math.abs(M) ? 0 < M ? (Math.min(+Math.floor(M / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((M - +(~~M >>> 0)) / 4294967296) >>> 0 : 0)];
          K[c + 40 >> 2] = L[0];
          K[c + 44 >> 2] = L[1];
          K[c + 48 >> 2] = 4096;
          K[c + 52 >> 2] = d.blocks;
          K[c + 56 >> 2] = d.atime.getTime() / 1e3 | 0;
          K[c + 60 >> 2] = 0;
          K[c + 64 >> 2] = d.mtime.getTime() / 1e3 | 0;
          K[c + 68 >> 2] = 0;
          K[c + 72 >> 2] = d.ctime.getTime() / 1e3 | 0;
          K[c + 76 >> 2] = 0;
          L = [d.ino >>> 0, (M = d.ino, 1 <= +Math.abs(M) ? 0 < M ? (Math.min(+Math.floor(M / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((M - +(~~M >>> 0)) / 4294967296) >>> 0 : 0)];
          K[c + 80 >> 2] = L[0];
          K[c + 84 >> 2] = L[1];
          return 0;
        }
        var Uc = void 0;
        function Vc() {
          Uc += 4;
          return K[Uc - 4 >> 2];
        }
        function Z(a) {
          a = T[a];
          if (!a)
            throw new Q(8);
          return a;
        }
        var Wc;
        Wc = Ba ? function() {
          var a = process.hrtime();
          return 1e3 * a[0] + a[1] / 1e6;
        } : function() {
          return performance.now();
        };
        var Xc = {};
        function Yc() {
          if (!Zc) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" === typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: xa || "./this.program" }, b;
            for (b in Xc)
              void 0 === Xc[b] ? delete a[b] : a[b] = Xc[b];
            var c = [];
            for (b in a)
              c.push(b + "=" + a[b]);
            Zc = c;
          }
          return Zc;
        }
        var Zc;
        function Vb(a, b, c, d) {
          a || (a = this);
          this.parent = a;
          this.Va = a.Va;
          this.$a = null;
          this.id = Ob++;
          this.name = b;
          this.mode = c;
          this.La = {};
          this.Ma = {};
          this.rdev = d;
        }
        Object.defineProperties(Vb.prototype, { read: { get: function() {
          return 365 === (this.mode & 365);
        }, set: function(a) {
          a ? this.mode |= 365 : this.mode &= -366;
        } }, write: { get: function() {
          return 146 === (this.mode & 146);
        }, set: function(a) {
          a ? this.mode |= 146 : this.mode &= -147;
        } } });
        Oc();
        U = Array(4096);
        cc(R, "/");
        X("/tmp");
        X("/home");
        X("/home/web_user");
        (function() {
          X("/dev");
          Cb(259, { read: function() {
            return 0;
          }, write: function(b, c, d, f) {
            return f;
          } });
          dc("/dev/null", 259);
          Bb(1280, Eb);
          Bb(1536, Fb);
          dc("/dev/tty", 1280);
          dc("/dev/tty1", 1536);
          var a = yb();
          Qc("random", a);
          Qc("urandom", a);
          X("/dev/shm");
          X("/dev/shm/tmp");
        })();
        (function() {
          X("/proc");
          var a = X("/proc/self");
          X("/proc/self/fd");
          cc({ Va: function() {
            var b = Jb(a, "fd", 16895, 73);
            b.La = { lookup: function(c, d) {
              var f = T[+d];
              if (!f)
                throw new Q(8);
              c = { parent: null, Va: { Ab: "fake" }, La: { readlink: function() {
                return f.path;
              } } };
              return c.parent = c;
            } };
            return b;
          } }, "/proc/self/fd");
        })();
        function ma(a, b) {
          var c = Array(aa(a) + 1);
          a = k(a, c, 0, c.length);
          b && (c.length = a);
          return c;
        }
        var ad = {
          a: function(a, b, c, d) {
            F("Assertion failed: " + A(a) + ", at: " + [b ? A(b) : "unknown filename", c, d ? A(d) : "unknown function"]);
          },
          s: function(a, b) {
            pb || (pb = true, lb());
            a = new Date(1e3 * K[a >> 2]);
            K[b >> 2] = a.getSeconds();
            K[b + 4 >> 2] = a.getMinutes();
            K[b + 8 >> 2] = a.getHours();
            K[b + 12 >> 2] = a.getDate();
            K[b + 16 >> 2] = a.getMonth();
            K[b + 20 >> 2] = a.getFullYear() - 1900;
            K[b + 24 >> 2] = a.getDay();
            var c = new Date(a.getFullYear(), 0, 1);
            K[b + 28 >> 2] = (a.getTime() - c.getTime()) / 864e5 | 0;
            K[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
            var d = new Date(
              a.getFullYear(),
              6,
              1
            ).getTimezoneOffset();
            c = c.getTimezoneOffset();
            a = (d != c && a.getTimezoneOffset() == Math.min(c, d)) | 0;
            K[b + 32 >> 2] = a;
            a = K[ob() + (a ? 4 : 0) >> 2];
            K[b + 40 >> 2] = a;
            return b;
          },
          y: function(a, b) {
            try {
              a = A(a);
              if (b & -8)
                var c = -28;
              else {
                var d;
                (d = W(a, { Xa: true }).node) ? (a = "", b & 4 && (a += "r"), b & 2 && (a += "w"), b & 1 && (a += "x"), c = a && Ub(d, a) ? -2 : 0) : c = -44;
              }
              return c;
            } catch (f) {
              return "undefined" !== typeof Y && f instanceof Q || F(f), -f.Pa;
            }
          },
          i: function(a, b) {
            try {
              return a = A(a), ha(a, b), 0;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          z: function(a) {
            try {
              return a = A(a), Ic(a), 0;
            } catch (b) {
              return "undefined" !== typeof Y && b instanceof Q || F(b), -b.Pa;
            }
          },
          j: function(a, b) {
            try {
              var c = T[a];
              if (!c)
                throw new Q(8);
              ha(c.node, b);
              return 0;
            } catch (d) {
              return "undefined" !== typeof Y && d instanceof Q || F(d), -d.Pa;
            }
          },
          A: function(a) {
            try {
              var b = T[a];
              if (!b)
                throw new Q(8);
              Ic(b.node);
              return 0;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          b: function(a, b, c) {
            Uc = c;
            try {
              var d = Z(a);
              switch (b) {
                case 0:
                  var f = Vc();
                  return 0 > f ? -28 : ia(d.path, d.flags, 0, f).fd;
                case 1:
                case 2:
                  return 0;
                case 3:
                  return d.flags;
                case 4:
                  return f = Vc(), d.flags |= f, 0;
                case 12:
                  return f = Vc(), La[f + 0 >> 1] = 2, 0;
                case 13:
                case 14:
                  return 0;
                case 16:
                case 8:
                  return -28;
                case 9:
                  return K[$c() >> 2] = 28, -1;
                default:
                  return -28;
              }
            } catch (g) {
              return "undefined" !== typeof Y && g instanceof Q || F(g), -g.Pa;
            }
          },
          k: function(a, b) {
            try {
              var c = Z(a);
              return Tc(fc, c.path, b);
            } catch (d) {
              return "undefined" !== typeof Y && d instanceof Q || F(d), -d.Pa;
            }
          },
          E: function(a, b, c) {
            try {
              var d = T[a];
              if (!d)
                throw new Q(8);
              if (0 === (d.flags & 2097155))
                throw new Q(28);
              Jc(d.node, c);
              return 0;
            } catch (f) {
              return "undefined" !== typeof Y && f instanceof Q || F(f), -f.Pa;
            }
          },
          D: function(a, b) {
            try {
              if (0 === b)
                return -28;
              if (b < aa("/") + 1)
                return -68;
              k("/", n, a, b);
              return a;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          v: function() {
            return 0;
          },
          d: function() {
            return 42;
          },
          h: function(a, b) {
            try {
              return a = A(a), Tc(gc, a, b);
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          l: function(a, b) {
            try {
              return a = A(a), a = r(a), "/" === a[a.length - 1] && (a = a.substr(0, a.length - 1)), X(a, b), 0;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          t: function(a, b, c, d, f, g) {
            try {
              a: {
                g <<= 12;
                var m = false;
                if (0 !== (d & 16) && 0 !== a % 65536)
                  var t = -28;
                else {
                  if (0 !== (d & 32)) {
                    var w = Gb(b);
                    if (!w) {
                      t = -48;
                      break a;
                    }
                    m = true;
                  } else {
                    var u = T[f];
                    if (!u) {
                      t = -8;
                      break a;
                    }
                    var C = g;
                    if (0 !== (c & 2) && 0 === (d & 2) && 2 !== (u.flags & 2097155))
                      throw new Q(2);
                    if (1 === (u.flags & 2097155))
                      throw new Q(2);
                    if (!u.Ma.gb)
                      throw new Q(43);
                    var I = u.Ma.gb(u, a, b, C, c, d);
                    w = I.Mb;
                    m = I.jb;
                  }
                  Sc[w] = { Jb: w, Ib: b, jb: m, fd: f, Lb: c, flags: d, offset: g };
                  t = w;
                }
              }
              return t;
            } catch (ba) {
              return "undefined" !== typeof Y && ba instanceof Q || F(ba), -ba.Pa;
            }
          },
          u: function(a, b) {
            try {
              var c = Sc[a];
              if (0 !== b && c) {
                if (b === c.Ib) {
                  var d = T[c.fd];
                  if (d && c.Lb & 2) {
                    var f = c.flags, g = c.offset, m = n.slice(a, a + b);
                    d && d.Ma.hb && d.Ma.hb(d, m, g, b, f);
                  }
                  Sc[a] = null;
                  c.jb && oa(c.Jb);
                }
                var t = 0;
              } else
                t = -28;
              return t;
            } catch (w) {
              return "undefined" !== typeof Y && w instanceof Q || F(w), -w.Pa;
            }
          },
          I: function(a, b, c) {
            Uc = c;
            try {
              var d = A(a), f = c ? Vc() : 0;
              return ia(d, b, f).fd;
            } catch (g) {
              return "undefined" !== typeof Y && g instanceof Q || F(g), -g.Pa;
            }
          },
          F: function(a, b, c) {
            try {
              a = A(a);
              if (0 >= c)
                var d = -28;
              else {
                var f = Qb(a), g = Math.min(c, aa(f)), m = y[b + g];
                k(f, n, b, c + 1);
                y[b + g] = m;
                d = g;
              }
              return d;
            } catch (t) {
              return "undefined" !== typeof Y && t instanceof Q || F(t), -t.Pa;
            }
          },
          H: function(a) {
            try {
              a = A(a);
              var b = W(a, { parent: true }).node, c = xb(a), d = Lb(b, c), f = Zb(b, c, true);
              if (f)
                throw new Q(f);
              if (!b.La.rmdir)
                throw new Q(63);
              if (d.$a)
                throw new Q(10);
              try {
                V.willDeletePath && V.willDeletePath(a);
              } catch (g) {
                H("FS.trackingDelegate['willDeletePath']('" + a + "') threw an exception: " + g.message);
              }
              b.La.rmdir(b, c);
              Tb(d);
              try {
                if (V.onDeletePath)
                  V.onDeletePath(a);
              } catch (g) {
                H("FS.trackingDelegate['onDeletePath']('" + a + "') threw an exception: " + g.message);
              }
              return 0;
            } catch (g) {
              return "undefined" !== typeof Y && g instanceof Q || F(g), -g.Pa;
            }
          },
          e: function(a, b) {
            try {
              return a = A(a), Tc(fc, a, b);
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), -c.Pa;
            }
          },
          x: function(a) {
            try {
              return a = A(a), ua(a), 0;
            } catch (b) {
              return "undefined" !== typeof Y && b instanceof Q || F(b), -b.Pa;
            }
          },
          J: function() {
            return 2147483648;
          },
          n: function(a, b, c) {
            n.copyWithin(a, b, b + c);
          },
          c: function(a) {
            var b = n.length;
            a >>>= 0;
            if (2147483648 < a)
              return false;
            for (var c = 1; 4 >= c; c *= 2) {
              var d = b * (1 + 0.2 / c);
              d = Math.min(d, a + 100663296);
              d = Math.max(a, d);
              0 < d % 65536 && (d += 65536 - d % 65536);
              a: {
                try {
                  Oa.grow(Math.min(2147483648, d) - Xa.byteLength + 65535 >>> 16);
                  Ya();
                  var f = 1;
                  break a;
                } catch (g) {
                }
                f = void 0;
              }
              if (f)
                return true;
            }
            return false;
          },
          r: function(a) {
            for (var b = Wc(); Wc() - b < a; )
              ;
          },
          p: function(a, b) {
            var c = 0;
            Yc().forEach(function(d, f) {
              var g = b + c;
              f = K[a + 4 * f >> 2] = g;
              for (g = 0; g < d.length; ++g)
                y[f++ >> 0] = d.charCodeAt(g);
              y[f >> 0] = 0;
              c += d.length + 1;
            });
            return 0;
          },
          q: function(a, b) {
            var c = Yc();
            K[a >> 2] = c.length;
            var d = 0;
            c.forEach(function(f) {
              d += f.length + 1;
            });
            K[b >> 2] = d;
            return 0;
          },
          f: function(a) {
            try {
              var b = Z(a);
              la(b);
              return 0;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), c.Pa;
            }
          },
          o: function(a, b) {
            try {
              var c = Z(a);
              y[b >> 0] = c.tty ? 2 : S(c.mode) ? 3 : 40960 === (c.mode & 61440) ? 7 : 4;
              return 0;
            } catch (d) {
              return "undefined" !== typeof Y && d instanceof Q || F(d), d.Pa;
            }
          },
          w: function(a, b, c, d) {
            try {
              a: {
                for (var f = Z(a), g = a = 0; g < c; g++) {
                  var m = K[b + (8 * g + 4) >> 2], t = Nc(f, y, K[b + 8 * g >> 2], m, void 0);
                  if (0 > t) {
                    var w = -1;
                    break a;
                  }
                  a += t;
                  if (t < m)
                    break;
                }
                w = a;
              }
              K[d >> 2] = w;
              return 0;
            } catch (u) {
              return "undefined" !== typeof Y && u instanceof Q || F(u), u.Pa;
            }
          },
          m: function(a, b, c, d, f) {
            try {
              var g = Z(a);
              a = 4294967296 * c + (b >>> 0);
              if (-9007199254740992 >= a || 9007199254740992 <= a)
                return -61;
              Mc(g, a, d);
              L = [g.position >>> 0, (M = g.position, 1 <= +Math.abs(M) ? 0 < M ? (Math.min(+Math.floor(M / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((M - +(~~M >>> 0)) / 4294967296) >>> 0 : 0)];
              K[f >> 2] = L[0];
              K[f + 4 >> 2] = L[1];
              g.nb && 0 === a && 0 === d && (g.nb = null);
              return 0;
            } catch (m) {
              return "undefined" !== typeof Y && m instanceof Q || F(m), m.Pa;
            }
          },
          G: function(a) {
            try {
              var b = Z(a);
              return b.Ma && b.Ma.fsync ? -b.Ma.fsync(b) : 0;
            } catch (c) {
              return "undefined" !== typeof Y && c instanceof Q || F(c), c.Pa;
            }
          },
          B: function(a, b, c, d) {
            try {
              a: {
                for (var f = Z(a), g = a = 0; g < c; g++) {
                  var m = ka(f, y, K[b + 8 * g >> 2], K[b + (8 * g + 4) >> 2], void 0);
                  if (0 > m) {
                    var t = -1;
                    break a;
                  }
                  a += m;
                }
                t = a;
              }
              K[d >> 2] = t;
              return 0;
            } catch (w) {
              return "undefined" !== typeof Y && w instanceof Q || F(w), w.Pa;
            }
          },
          g: function(a) {
            var b = Date.now();
            K[a >> 2] = b / 1e3 | 0;
            K[a + 4 >> 2] = b % 1e3 * 1e3 | 0;
            return 0;
          },
          K: function(a) {
            var b = Date.now() / 1e3 | 0;
            a && (K[a >> 2] = b);
            return b;
          },
          C: function(a, b) {
            if (b) {
              var c = b + 8;
              b = 1e3 * K[c >> 2];
              b += K[c + 4 >> 2] / 1e3;
            } else
              b = Date.now();
            a = A(a);
            try {
              var d = W(a, { Xa: true }).node;
              d.La.Sa(d, { timestamp: Math.max(b, b) });
              var f = 0;
            } catch (g) {
              if (!(g instanceof Q)) {
                b: {
                  f = Error();
                  if (!f.stack) {
                    try {
                      throw Error();
                    } catch (m) {
                      f = m;
                    }
                    if (!f.stack) {
                      f = "(no stack trace available)";
                      break b;
                    }
                  }
                  f = f.stack.toString();
                }
                e.extraStackTrace && (f += "\n" + e.extraStackTrace());
                f = kb(f);
                throw g + " : " + f;
              }
              f = g.Pa;
              K[$c() >> 2] = f;
              f = -1;
            }
            return f;
          }
        };
        (function() {
          function a(f) {
            e.asm = f.exports;
            Oa = e.asm.L;
            Ya();
            J = e.asm.Ca;
            $a.unshift(e.asm.M);
            cb--;
            e.monitorRunDependencies && e.monitorRunDependencies(cb);
            0 == cb && (null !== db && (clearInterval(db), db = null), eb && (f = eb, eb = null, f()));
          }
          function b(f) {
            a(f.instance);
          }
          function c(f) {
            return ib().then(function(g) {
              return WebAssembly.instantiate(g, d);
            }).then(function(g) {
              return g;
            }).then(f, function(g) {
              H("failed to asynchronously prepare wasm: " + g);
              F(g);
            });
          }
          var d = { a: ad };
          cb++;
          e.monitorRunDependencies && e.monitorRunDependencies(cb);
          if (e.instantiateWasm)
            try {
              return e.instantiateWasm(d, a);
            } catch (f) {
              return H("Module.instantiateWasm callback failed with error: " + f), false;
            }
          (function() {
            return Ka || "function" !== typeof WebAssembly.instantiateStreaming || fb() || P.startsWith("file://") || "function" !== typeof fetch ? c(b) : fetch(P, { credentials: "same-origin" }).then(function(f) {
              return WebAssembly.instantiateStreaming(f, d).then(b, function(g) {
                H("wasm streaming compile failed: " + g);
                H("falling back to ArrayBuffer instantiation");
                return c(b);
              });
            });
          })();
          return {};
        })();
        e.___wasm_call_ctors = function() {
          return (e.___wasm_call_ctors = e.asm.M).apply(null, arguments);
        };
        e._sqlite3_free = function() {
          return (e._sqlite3_free = e.asm.N).apply(null, arguments);
        };
        var $c = e.___errno_location = function() {
          return ($c = e.___errno_location = e.asm.O).apply(null, arguments);
        };
        e._sqlite3_step = function() {
          return (e._sqlite3_step = e.asm.P).apply(null, arguments);
        };
        e._sqlite3_finalize = function() {
          return (e._sqlite3_finalize = e.asm.Q).apply(null, arguments);
        };
        e._sqlite3_prepare_v2 = function() {
          return (e._sqlite3_prepare_v2 = e.asm.R).apply(null, arguments);
        };
        e._sqlite3_reset = function() {
          return (e._sqlite3_reset = e.asm.S).apply(null, arguments);
        };
        e._sqlite3_clear_bindings = function() {
          return (e._sqlite3_clear_bindings = e.asm.T).apply(null, arguments);
        };
        e._sqlite3_value_blob = function() {
          return (e._sqlite3_value_blob = e.asm.U).apply(null, arguments);
        };
        e._sqlite3_value_text = function() {
          return (e._sqlite3_value_text = e.asm.V).apply(null, arguments);
        };
        e._sqlite3_value_bytes = function() {
          return (e._sqlite3_value_bytes = e.asm.W).apply(null, arguments);
        };
        e._sqlite3_value_double = function() {
          return (e._sqlite3_value_double = e.asm.X).apply(null, arguments);
        };
        e._sqlite3_value_int = function() {
          return (e._sqlite3_value_int = e.asm.Y).apply(null, arguments);
        };
        e._sqlite3_value_type = function() {
          return (e._sqlite3_value_type = e.asm.Z).apply(null, arguments);
        };
        e._sqlite3_result_blob = function() {
          return (e._sqlite3_result_blob = e.asm._).apply(null, arguments);
        };
        e._sqlite3_result_double = function() {
          return (e._sqlite3_result_double = e.asm.$).apply(null, arguments);
        };
        e._sqlite3_result_error = function() {
          return (e._sqlite3_result_error = e.asm.aa).apply(null, arguments);
        };
        e._sqlite3_result_int = function() {
          return (e._sqlite3_result_int = e.asm.ba).apply(null, arguments);
        };
        e._sqlite3_result_int64 = function() {
          return (e._sqlite3_result_int64 = e.asm.ca).apply(null, arguments);
        };
        e._sqlite3_result_null = function() {
          return (e._sqlite3_result_null = e.asm.da).apply(null, arguments);
        };
        e._sqlite3_result_text = function() {
          return (e._sqlite3_result_text = e.asm.ea).apply(null, arguments);
        };
        e._sqlite3_column_count = function() {
          return (e._sqlite3_column_count = e.asm.fa).apply(null, arguments);
        };
        e._sqlite3_data_count = function() {
          return (e._sqlite3_data_count = e.asm.ga).apply(null, arguments);
        };
        e._sqlite3_column_blob = function() {
          return (e._sqlite3_column_blob = e.asm.ha).apply(null, arguments);
        };
        e._sqlite3_column_bytes = function() {
          return (e._sqlite3_column_bytes = e.asm.ia).apply(null, arguments);
        };
        e._sqlite3_column_double = function() {
          return (e._sqlite3_column_double = e.asm.ja).apply(null, arguments);
        };
        e._sqlite3_column_text = function() {
          return (e._sqlite3_column_text = e.asm.ka).apply(null, arguments);
        };
        e._sqlite3_column_type = function() {
          return (e._sqlite3_column_type = e.asm.la).apply(null, arguments);
        };
        e._sqlite3_column_name = function() {
          return (e._sqlite3_column_name = e.asm.ma).apply(null, arguments);
        };
        e._sqlite3_bind_blob = function() {
          return (e._sqlite3_bind_blob = e.asm.na).apply(null, arguments);
        };
        e._sqlite3_bind_double = function() {
          return (e._sqlite3_bind_double = e.asm.oa).apply(null, arguments);
        };
        e._sqlite3_bind_int = function() {
          return (e._sqlite3_bind_int = e.asm.pa).apply(null, arguments);
        };
        e._sqlite3_bind_text = function() {
          return (e._sqlite3_bind_text = e.asm.qa).apply(null, arguments);
        };
        e._sqlite3_bind_parameter_index = function() {
          return (e._sqlite3_bind_parameter_index = e.asm.ra).apply(null, arguments);
        };
        e._sqlite3_sql = function() {
          return (e._sqlite3_sql = e.asm.sa).apply(null, arguments);
        };
        e._sqlite3_normalized_sql = function() {
          return (e._sqlite3_normalized_sql = e.asm.ta).apply(null, arguments);
        };
        e._sqlite3_errmsg = function() {
          return (e._sqlite3_errmsg = e.asm.ua).apply(null, arguments);
        };
        e._sqlite3_exec = function() {
          return (e._sqlite3_exec = e.asm.va).apply(null, arguments);
        };
        e._sqlite3_changes = function() {
          return (e._sqlite3_changes = e.asm.wa).apply(null, arguments);
        };
        e._sqlite3_close_v2 = function() {
          return (e._sqlite3_close_v2 = e.asm.xa).apply(null, arguments);
        };
        e._sqlite3_create_function_v2 = function() {
          return (e._sqlite3_create_function_v2 = e.asm.ya).apply(null, arguments);
        };
        e._sqlite3_open = function() {
          return (e._sqlite3_open = e.asm.za).apply(null, arguments);
        };
        var da = e._malloc = function() {
          return (da = e._malloc = e.asm.Aa).apply(null, arguments);
        }, oa = e._free = function() {
          return (oa = e._free = e.asm.Ba).apply(null, arguments);
        };
        e._RegisterExtensionFunctions = function() {
          return (e._RegisterExtensionFunctions = e.asm.Da).apply(null, arguments);
        };
        var ob = e.__get_tzname = function() {
          return (ob = e.__get_tzname = e.asm.Ea).apply(null, arguments);
        }, nb = e.__get_daylight = function() {
          return (nb = e.__get_daylight = e.asm.Fa).apply(null, arguments);
        }, mb = e.__get_timezone = function() {
          return (mb = e.__get_timezone = e.asm.Ga).apply(null, arguments);
        }, pa = e.stackSave = function() {
          return (pa = e.stackSave = e.asm.Ha).apply(null, arguments);
        }, ra = e.stackRestore = function() {
          return (ra = e.stackRestore = e.asm.Ia).apply(null, arguments);
        }, x = e.stackAlloc = function() {
          return (x = e.stackAlloc = e.asm.Ja).apply(
            null,
            arguments
          );
        }, Hb = e._memalign = function() {
          return (Hb = e._memalign = e.asm.Ka).apply(null, arguments);
        };
        e.cwrap = function(a, b, c, d) {
          c = c || [];
          var f = c.every(function(g) {
            return "number" === g;
          });
          return "string" !== b && f && !d ? Qa(a) : function() {
            return Ra(a, b, c, arguments);
          };
        };
        e.UTF8ToString = A;
        e.stackSave = pa;
        e.stackRestore = ra;
        e.stackAlloc = x;
        var bd;
        eb = function cd() {
          bd || dd();
          bd || (eb = cd);
        };
        function dd() {
          function a() {
            if (!bd && (bd = true, e.calledRun = true, !Pa)) {
              e.noFSInit || Pc || (Pc = true, Oc(), e.stdin = e.stdin, e.stdout = e.stdout, e.stderr = e.stderr, e.stdin ? Qc("stdin", e.stdin) : ec("/dev/tty", "/dev/stdin"), e.stdout ? Qc("stdout", null, e.stdout) : ec("/dev/tty", "/dev/stdout"), e.stderr ? Qc("stderr", null, e.stderr) : ec("/dev/tty1", "/dev/stderr"), ia("/dev/stdin", 0), ia("/dev/stdout", 1), ia("/dev/stderr", 1));
              Pb = false;
              jb($a);
              if (e.onRuntimeInitialized)
                e.onRuntimeInitialized();
              if (e.postRun)
                for ("function" == typeof e.postRun && (e.postRun = [e.postRun]); e.postRun.length; ) {
                  var b = e.postRun.shift();
                  ab.unshift(b);
                }
              jb(ab);
            }
          }
          if (!(0 < cb)) {
            if (e.preRun)
              for ("function" == typeof e.preRun && (e.preRun = [e.preRun]); e.preRun.length; )
                bb();
            jb(Za);
            0 < cb || (e.setStatus ? (e.setStatus("Running..."), setTimeout(function() {
              setTimeout(function() {
                e.setStatus("");
              }, 1);
              a();
            }, 1)) : a());
          }
        }
        e.run = dd;
        if (e.preInit)
          for ("function" == typeof e.preInit && (e.preInit = [e.preInit]); 0 < e.preInit.length; )
            e.preInit.pop()();
        dd();
        return Module;
      });
      return initSqlJsPromise;
    };
    if (typeof exports === "object" && typeof module2 === "object") {
      module2.exports = initSqlJs4;
      module2.exports.default = initSqlJs4;
    } else if (typeof define === "function" && define["amd"]) {
      define([], function() {
        return initSqlJs4;
      });
    } else if (typeof exports === "object") {
      exports["Module"] = initSqlJs4;
    }
  }
});

// node_modules/papaparse/papaparse.min.js
var require_papaparse_min = __commonJS({
  "node_modules/papaparse/papaparse.min.js"(exports, module2) {
    ((e, t) => {
      "function" == typeof define && define.amd ? define([], t) : "object" == typeof module2 && "undefined" != typeof exports ? module2.exports = t() : e.Papa = t();
    })(exports, function r() {
      var n = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== n ? n : {};
      var d, s = !n.document && !!n.postMessage, a = n.IS_PAPA_WORKER || false, o = {}, h = 0, v = {};
      function u(e) {
        this._handle = null, this._finished = false, this._completed = false, this._halted = false, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = true, this._completeResults = { data: [], errors: [], meta: {} }, function(e2) {
          var t = w(e2);
          t.chunkSize = parseInt(t.chunkSize), e2.step || e2.chunk || (t.chunkSize = null);
          this._handle = new i(t), (this._handle.streamer = this)._config = t;
        }.call(this, e), this.parseChunk = function(t, e2) {
          var i2 = parseInt(this._config.skipFirstNLines) || 0;
          if (this.isFirstChunk && 0 < i2) {
            let e3 = this._config.newline;
            e3 || (r2 = this._config.quoteChar || '"', e3 = this._handle.guessLineEndings(t, r2)), t = [...t.split(e3).slice(i2)].join(e3);
          }
          this.isFirstChunk && U(this._config.beforeFirstChunk) && void 0 !== (r2 = this._config.beforeFirstChunk(t)) && (t = r2), this.isFirstChunk = false, this._halted = false;
          var i2 = this._partialLine + t, r2 = (this._partialLine = "", this._handle.parse(i2, this._baseIndex, !this._finished));
          if (!this._handle.paused() && !this._handle.aborted()) {
            t = r2.meta.cursor, i2 = (this._finished || (this._partialLine = i2.substring(t - this._baseIndex), this._baseIndex = t), r2 && r2.data && (this._rowCount += r2.data.length), this._finished || this._config.preview && this._rowCount >= this._config.preview);
            if (a)
              n.postMessage({ results: r2, workerId: v.WORKER_ID, finished: i2 });
            else if (U(this._config.chunk) && !e2) {
              if (this._config.chunk(r2, this._handle), this._handle.paused() || this._handle.aborted())
                return void (this._halted = true);
              this._completeResults = r2 = void 0;
            }
            return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(r2.data), this._completeResults.errors = this._completeResults.errors.concat(r2.errors), this._completeResults.meta = r2.meta), this._completed || !i2 || !U(this._config.complete) || r2 && r2.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = true), i2 || r2 && r2.meta.paused || this._nextChunk(), r2;
          }
          this._halted = true;
        }, this._sendError = function(e2) {
          U(this._config.error) ? this._config.error(e2) : a && this._config.error && n.postMessage({ workerId: v.WORKER_ID, error: e2, finished: false });
        };
      }
      function f(e) {
        var r2;
        (e = e || {}).chunkSize || (e.chunkSize = v.RemoteChunkSize), u.call(this, e), this._nextChunk = s ? function() {
          this._readChunk(), this._chunkLoaded();
        } : function() {
          this._readChunk();
        }, this.stream = function(e2) {
          this._input = e2, this._nextChunk();
        }, this._readChunk = function() {
          if (this._finished)
            this._chunkLoaded();
          else {
            if (r2 = new XMLHttpRequest(), this._config.withCredentials && (r2.withCredentials = this._config.withCredentials), s || (r2.onload = y(this._chunkLoaded, this), r2.onerror = y(this._chunkError, this)), r2.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !s), this._config.downloadRequestHeaders) {
              var e2, t = this._config.downloadRequestHeaders;
              for (e2 in t)
                r2.setRequestHeader(e2, t[e2]);
            }
            var i2;
            this._config.chunkSize && (i2 = this._start + this._config.chunkSize - 1, r2.setRequestHeader("Range", "bytes=" + this._start + "-" + i2));
            try {
              r2.send(this._config.downloadRequestBody);
            } catch (e3) {
              this._chunkError(e3.message);
            }
            s && 0 === r2.status && this._chunkError();
          }
        }, this._chunkLoaded = function() {
          4 === r2.readyState && (r2.status < 200 || 400 <= r2.status ? this._chunkError() : (this._start += this._config.chunkSize || r2.responseText.length, this._finished = !this._config.chunkSize || this._start >= ((e2) => null !== (e2 = e2.getResponseHeader("Content-Range")) ? parseInt(e2.substring(e2.lastIndexOf("/") + 1)) : -1)(r2), this.parseChunk(r2.responseText)));
        }, this._chunkError = function(e2) {
          e2 = r2.statusText || e2;
          this._sendError(new Error(e2));
        };
      }
      function l(e) {
        (e = e || {}).chunkSize || (e.chunkSize = v.LocalChunkSize), u.call(this, e);
        var i2, r2, n2 = "undefined" != typeof FileReader;
        this.stream = function(e2) {
          this._input = e2, r2 = e2.slice || e2.webkitSlice || e2.mozSlice, n2 ? ((i2 = new FileReader()).onload = y(this._chunkLoaded, this), i2.onerror = y(this._chunkError, this)) : i2 = new FileReaderSync(), this._nextChunk();
        }, this._nextChunk = function() {
          this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
        }, this._readChunk = function() {
          var e2 = this._input, t = (this._config.chunkSize && (t = Math.min(this._start + this._config.chunkSize, this._input.size), e2 = r2.call(e2, this._start, t)), i2.readAsText(e2, this._config.encoding));
          n2 || this._chunkLoaded({ target: { result: t } });
        }, this._chunkLoaded = function(e2) {
          this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(e2.target.result);
        }, this._chunkError = function() {
          this._sendError(i2.error);
        };
      }
      function c(e) {
        var i2;
        u.call(this, e = e || {}), this.stream = function(e2) {
          return i2 = e2, this._nextChunk();
        }, this._nextChunk = function() {
          var e2, t;
          if (!this._finished)
            return e2 = this._config.chunkSize, i2 = e2 ? (t = i2.substring(0, e2), i2.substring(e2)) : (t = i2, ""), this._finished = !i2, this.parseChunk(t);
        };
      }
      function p(e) {
        u.call(this, e = e || {});
        var t = [], i2 = true, r2 = false;
        this.pause = function() {
          u.prototype.pause.apply(this, arguments), this._input.pause();
        }, this.resume = function() {
          u.prototype.resume.apply(this, arguments), this._input.resume();
        }, this.stream = function(e2) {
          this._input = e2, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
        }, this._checkIsFinished = function() {
          r2 && 1 === t.length && (this._finished = true);
        }, this._nextChunk = function() {
          this._checkIsFinished(), t.length ? this.parseChunk(t.shift()) : i2 = true;
        }, this._streamData = y(function(e2) {
          try {
            t.push("string" == typeof e2 ? e2 : e2.toString(this._config.encoding)), i2 && (i2 = false, this._checkIsFinished(), this.parseChunk(t.shift()));
          } catch (e3) {
            this._streamError(e3);
          }
        }, this), this._streamError = y(function(e2) {
          this._streamCleanUp(), this._sendError(e2);
        }, this), this._streamEnd = y(function() {
          this._streamCleanUp(), r2 = true, this._streamData("");
        }, this), this._streamCleanUp = y(function() {
          this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
        }, this);
      }
      function i(m2) {
        var n2, s2, a2, t, o2 = Math.pow(2, 53), h2 = -o2, u2 = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, d2 = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, i2 = this, r2 = 0, f2 = 0, l2 = false, e = false, c2 = [], p2 = { data: [], errors: [], meta: {} };
        function y2(e2) {
          return "greedy" === m2.skipEmptyLines ? "" === e2.join("").trim() : 1 === e2.length && 0 === e2[0].length;
        }
        function g2() {
          if (p2 && a2 && (k("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + v.DefaultDelimiter + "'"), a2 = false), m2.skipEmptyLines && (p2.data = p2.data.filter(function(e3) {
            return !y2(e3);
          })), _2()) {
            let t3 = function(e3, t4) {
              U(m2.transformHeader) && (e3 = m2.transformHeader(e3, t4)), c2.push(e3);
            };
            var t2 = t3;
            if (p2)
              if (Array.isArray(p2.data[0])) {
                for (var e2 = 0; _2() && e2 < p2.data.length; e2++)
                  p2.data[e2].forEach(t3);
                p2.data.splice(0, 1);
              } else
                p2.data.forEach(t3);
          }
          function i3(e3, t3) {
            for (var i4 = m2.header ? {} : [], r4 = 0; r4 < e3.length; r4++) {
              var n3 = r4, s3 = e3[r4], s3 = ((e4, t4) => ((e5) => (m2.dynamicTypingFunction && void 0 === m2.dynamicTyping[e5] && (m2.dynamicTyping[e5] = m2.dynamicTypingFunction(e5)), true === (m2.dynamicTyping[e5] || m2.dynamicTyping)))(e4) ? "true" === t4 || "TRUE" === t4 || "false" !== t4 && "FALSE" !== t4 && (((e5) => {
                if (u2.test(e5)) {
                  e5 = parseFloat(e5);
                  if (h2 < e5 && e5 < o2)
                    return 1;
                }
              })(t4) ? parseFloat(t4) : d2.test(t4) ? new Date(t4) : "" === t4 ? null : t4) : t4)(n3 = m2.header ? r4 >= c2.length ? "__parsed_extra" : c2[r4] : n3, s3 = m2.transform ? m2.transform(s3, n3) : s3);
              "__parsed_extra" === n3 ? (i4[n3] = i4[n3] || [], i4[n3].push(s3)) : i4[n3] = s3;
            }
            return m2.header && (r4 > c2.length ? k("FieldMismatch", "TooManyFields", "Too many fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3) : r4 < c2.length && k("FieldMismatch", "TooFewFields", "Too few fields: expected " + c2.length + " fields but parsed " + r4, f2 + t3)), i4;
          }
          var r3;
          p2 && (m2.header || m2.dynamicTyping || m2.transform) && (r3 = 1, !p2.data.length || Array.isArray(p2.data[0]) ? (p2.data = p2.data.map(i3), r3 = p2.data.length) : p2.data = i3(p2.data, 0), m2.header && p2.meta && (p2.meta.fields = c2), f2 += r3);
        }
        function _2() {
          return m2.header && 0 === c2.length;
        }
        function k(e2, t2, i3, r3) {
          e2 = { type: e2, code: t2, message: i3 };
          void 0 !== r3 && (e2.row = r3), p2.errors.push(e2);
        }
        U(m2.step) && (t = m2.step, m2.step = function(e2) {
          p2 = e2, _2() ? g2() : (g2(), 0 !== p2.data.length && (r2 += e2.data.length, m2.preview && r2 > m2.preview ? s2.abort() : (p2.data = p2.data[0], t(p2, i2))));
        }), this.parse = function(e2, t2, i3) {
          var r3 = m2.quoteChar || '"', r3 = (m2.newline || (m2.newline = this.guessLineEndings(e2, r3)), a2 = false, m2.delimiter ? U(m2.delimiter) && (m2.delimiter = m2.delimiter(e2), p2.meta.delimiter = m2.delimiter) : ((r3 = ((e3, t3, i4, r4, n3) => {
            var s3, a3, o3, h3;
            n3 = n3 || [",", "	", "|", ";", v.RECORD_SEP, v.UNIT_SEP];
            for (var u3 = 0; u3 < n3.length; u3++) {
              for (var d3, f3 = n3[u3], l3 = 0, c3 = 0, p3 = 0, g3 = (o3 = void 0, new E({ comments: r4, delimiter: f3, newline: t3, preview: 10 }).parse(e3)), _3 = 0; _3 < g3.data.length; _3++)
                i4 && y2(g3.data[_3]) ? p3++ : (d3 = g3.data[_3].length, c3 += d3, void 0 === o3 ? o3 = d3 : 0 < d3 && (l3 += Math.abs(d3 - o3), o3 = d3));
              0 < g3.data.length && (c3 /= g3.data.length - p3), (void 0 === a3 || l3 <= a3) && (void 0 === h3 || h3 < c3) && 1.99 < c3 && (a3 = l3, s3 = f3, h3 = c3);
            }
            return { successful: !!(m2.delimiter = s3), bestDelimiter: s3 };
          })(e2, m2.newline, m2.skipEmptyLines, m2.comments, m2.delimitersToGuess)).successful ? m2.delimiter = r3.bestDelimiter : (a2 = true, m2.delimiter = v.DefaultDelimiter), p2.meta.delimiter = m2.delimiter), w(m2));
          return m2.preview && m2.header && r3.preview++, n2 = e2, s2 = new E(r3), p2 = s2.parse(n2, t2, i3), g2(), l2 ? { meta: { paused: true } } : p2 || { meta: { paused: false } };
        }, this.paused = function() {
          return l2;
        }, this.pause = function() {
          l2 = true, s2.abort(), n2 = U(m2.chunk) ? "" : n2.substring(s2.getCharIndex());
        }, this.resume = function() {
          i2.streamer._halted ? (l2 = false, i2.streamer.parseChunk(n2, true)) : setTimeout(i2.resume, 3);
        }, this.aborted = function() {
          return e;
        }, this.abort = function() {
          e = true, s2.abort(), p2.meta.aborted = true, U(m2.complete) && m2.complete(p2), n2 = "";
        }, this.guessLineEndings = function(e2, t2) {
          e2 = e2.substring(0, 1048576);
          var t2 = new RegExp(P(t2) + "([^]*?)" + P(t2), "gm"), i3 = (e2 = e2.replace(t2, "")).split("\r"), t2 = e2.split("\n"), e2 = 1 < t2.length && t2[0].length < i3[0].length;
          if (1 === i3.length || e2)
            return "\n";
          for (var r3 = 0, n3 = 0; n3 < i3.length; n3++)
            "\n" === i3[n3][0] && r3++;
          return r3 >= i3.length / 2 ? "\r\n" : "\r";
        };
      }
      function P(e) {
        return e.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function E(C) {
        var S = (C = C || {}).delimiter, O = C.newline, x = C.comments, I = C.step, A = C.preview, T = C.fastMode, D = null, L = false, F = null == C.quoteChar ? '"' : C.quoteChar, j = F;
        if (void 0 !== C.escapeChar && (j = C.escapeChar), ("string" != typeof S || -1 < v.BAD_DELIMITERS.indexOf(S)) && (S = ","), x === S)
          throw new Error("Comment character same as delimiter");
        true === x ? x = "#" : ("string" != typeof x || -1 < v.BAD_DELIMITERS.indexOf(x)) && (x = false), "\n" !== O && "\r" !== O && "\r\n" !== O && (O = "\n");
        var z = 0, M = false;
        this.parse = function(i2, t, r2) {
          if ("string" != typeof i2)
            throw new Error("Input must be a string");
          var n2 = i2.length, e = S.length, s2 = O.length, a2 = x.length, o2 = U(I), h2 = [], u2 = [], d2 = [], f2 = z = 0;
          if (!i2)
            return b();
          if (T || false !== T && -1 === i2.indexOf(F)) {
            for (var l2 = i2.split(O), c2 = 0; c2 < l2.length; c2++) {
              if (d2 = l2[c2], z += d2.length, c2 !== l2.length - 1)
                z += O.length;
              else if (r2)
                return b();
              if (!x || d2.substring(0, a2) !== x) {
                if (o2) {
                  if (h2 = [], k(d2.split(S)), R(), M)
                    return b();
                } else
                  k(d2.split(S));
                if (A && A <= c2)
                  return h2 = h2.slice(0, A), b(true);
              }
            }
            return b();
          }
          for (var p2 = i2.indexOf(S, z), g2 = i2.indexOf(O, z), _2 = new RegExp(P(j) + P(F), "g"), m2 = i2.indexOf(F, z); ; )
            if (i2[z] === F)
              for (m2 = z, z++; ; ) {
                if (-1 === (m2 = i2.indexOf(F, m2 + 1)))
                  return r2 || u2.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: h2.length, index: z }), E2();
                if (m2 === n2 - 1)
                  return E2(i2.substring(z, m2).replace(_2, F));
                if (F === j && i2[m2 + 1] === j)
                  m2++;
                else if (F === j || 0 === m2 || i2[m2 - 1] !== j) {
                  -1 !== p2 && p2 < m2 + 1 && (p2 = i2.indexOf(S, m2 + 1));
                  var y2 = v2(-1 === (g2 = -1 !== g2 && g2 < m2 + 1 ? i2.indexOf(O, m2 + 1) : g2) ? p2 : Math.min(p2, g2));
                  if (i2.substr(m2 + 1 + y2, e) === S) {
                    d2.push(i2.substring(z, m2).replace(_2, F)), i2[z = m2 + 1 + y2 + e] !== F && (m2 = i2.indexOf(F, z)), p2 = i2.indexOf(S, z), g2 = i2.indexOf(O, z);
                    break;
                  }
                  y2 = v2(g2);
                  if (i2.substring(m2 + 1 + y2, m2 + 1 + y2 + s2) === O) {
                    if (d2.push(i2.substring(z, m2).replace(_2, F)), w2(m2 + 1 + y2 + s2), p2 = i2.indexOf(S, z), m2 = i2.indexOf(F, z), o2 && (R(), M))
                      return b();
                    if (A && h2.length >= A)
                      return b(true);
                    break;
                  }
                  u2.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: h2.length, index: z }), m2++;
                }
              }
            else if (x && 0 === d2.length && i2.substring(z, z + a2) === x) {
              if (-1 === g2)
                return b();
              z = g2 + s2, g2 = i2.indexOf(O, z), p2 = i2.indexOf(S, z);
            } else if (-1 !== p2 && (p2 < g2 || -1 === g2))
              d2.push(i2.substring(z, p2)), z = p2 + e, p2 = i2.indexOf(S, z);
            else {
              if (-1 === g2)
                break;
              if (d2.push(i2.substring(z, g2)), w2(g2 + s2), o2 && (R(), M))
                return b();
              if (A && h2.length >= A)
                return b(true);
            }
          return E2();
          function k(e2) {
            h2.push(e2), f2 = z;
          }
          function v2(e2) {
            var t2 = 0;
            return t2 = -1 !== e2 && (e2 = i2.substring(m2 + 1, e2)) && "" === e2.trim() ? e2.length : t2;
          }
          function E2(e2) {
            return r2 || (void 0 === e2 && (e2 = i2.substring(z)), d2.push(e2), z = n2, k(d2), o2 && R()), b();
          }
          function w2(e2) {
            z = e2, k(d2), d2 = [], g2 = i2.indexOf(O, z);
          }
          function b(e2) {
            if (C.header && !t && h2.length && !L) {
              var s3 = h2[0], a3 = {}, o3 = new Set(s3);
              let n3 = false;
              for (let r3 = 0; r3 < s3.length; r3++) {
                let i3 = s3[r3];
                if (a3[i3 = U(C.transformHeader) ? C.transformHeader(i3, r3) : i3]) {
                  let e3, t2 = a3[i3];
                  for (; e3 = i3 + "_" + t2, t2++, o3.has(e3); )
                    ;
                  o3.add(e3), s3[r3] = e3, a3[i3]++, n3 = true, (D = null === D ? {} : D)[e3] = i3;
                } else
                  a3[i3] = 1, s3[r3] = i3;
                o3.add(i3);
              }
              n3 && console.warn("Duplicate headers found and renamed."), L = true;
            }
            return { data: h2, errors: u2, meta: { delimiter: S, linebreak: O, aborted: M, truncated: !!e2, cursor: f2 + (t || 0), renamedHeaders: D } };
          }
          function R() {
            I(b()), h2 = [], u2 = [];
          }
        }, this.abort = function() {
          M = true;
        }, this.getCharIndex = function() {
          return z;
        };
      }
      function g(e) {
        var t = e.data, i2 = o[t.workerId], r2 = false;
        if (t.error)
          i2.userError(t.error, t.file);
        else if (t.results && t.results.data) {
          var n2 = { abort: function() {
            r2 = true, _(t.workerId, { data: [], errors: [], meta: { aborted: true } });
          }, pause: m, resume: m };
          if (U(i2.userStep)) {
            for (var s2 = 0; s2 < t.results.data.length && (i2.userStep({ data: t.results.data[s2], errors: t.results.errors, meta: t.results.meta }, n2), !r2); s2++)
              ;
            delete t.results;
          } else
            U(i2.userChunk) && (i2.userChunk(t.results, n2, t.file), delete t.results);
        }
        t.finished && !r2 && _(t.workerId, t.results);
      }
      function _(e, t) {
        var i2 = o[e];
        U(i2.userComplete) && i2.userComplete(t), i2.terminate(), delete o[e];
      }
      function m() {
        throw new Error("Not implemented.");
      }
      function w(e) {
        if ("object" != typeof e || null === e)
          return e;
        var t, i2 = Array.isArray(e) ? [] : {};
        for (t in e)
          i2[t] = w(e[t]);
        return i2;
      }
      function y(e, t) {
        return function() {
          e.apply(t, arguments);
        };
      }
      function U(e) {
        return "function" == typeof e;
      }
      return v.parse = function(e, t) {
        var i2 = (t = t || {}).dynamicTyping || false;
        U(i2) && (t.dynamicTypingFunction = i2, i2 = {});
        if (t.dynamicTyping = i2, t.transform = !!U(t.transform) && t.transform, !t.worker || !v.WORKERS_SUPPORTED)
          return i2 = null, v.NODE_STREAM_INPUT, "string" == typeof e ? (e = ((e2) => 65279 !== e2.charCodeAt(0) ? e2 : e2.slice(1))(e), i2 = new (t.download ? f : c)(t)) : true === e.readable && U(e.read) && U(e.on) ? i2 = new p(t) : (n.File && e instanceof File || e instanceof Object) && (i2 = new l(t)), i2.stream(e);
        (i2 = (() => {
          var e2;
          return !!v.WORKERS_SUPPORTED && (e2 = (() => {
            var e3 = n.URL || n.webkitURL || null, t2 = r.toString();
            return v.BLOB_URL || (v.BLOB_URL = e3.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", t2, ")();"], { type: "text/javascript" })));
          })(), (e2 = new n.Worker(e2)).onmessage = g, e2.id = h++, o[e2.id] = e2);
        })()).userStep = t.step, i2.userChunk = t.chunk, i2.userComplete = t.complete, i2.userError = t.error, t.step = U(t.step), t.chunk = U(t.chunk), t.complete = U(t.complete), t.error = U(t.error), delete t.worker, i2.postMessage({ input: e, config: t, workerId: i2.id });
      }, v.unparse = function(e, t) {
        var n2 = false, _2 = true, m2 = ",", y2 = "\r\n", s2 = '"', a2 = s2 + s2, i2 = false, r2 = null, o2 = false, h2 = ((() => {
          if ("object" == typeof t) {
            if ("string" != typeof t.delimiter || v.BAD_DELIMITERS.filter(function(e2) {
              return -1 !== t.delimiter.indexOf(e2);
            }).length || (m2 = t.delimiter), "boolean" != typeof t.quotes && "function" != typeof t.quotes && !Array.isArray(t.quotes) || (n2 = t.quotes), "boolean" != typeof t.skipEmptyLines && "string" != typeof t.skipEmptyLines || (i2 = t.skipEmptyLines), "string" == typeof t.newline && (y2 = t.newline), "string" == typeof t.quoteChar && (s2 = t.quoteChar), "boolean" == typeof t.header && (_2 = t.header), Array.isArray(t.columns)) {
              if (0 === t.columns.length)
                throw new Error("Option columns is empty");
              r2 = t.columns;
            }
            void 0 !== t.escapeChar && (a2 = t.escapeChar + s2), t.escapeFormulae instanceof RegExp ? o2 = t.escapeFormulae : "boolean" == typeof t.escapeFormulae && t.escapeFormulae && (o2 = /^[=+\-@\t\r].*$/);
          }
        })(), new RegExp(P(s2), "g"));
        "string" == typeof e && (e = JSON.parse(e));
        if (Array.isArray(e)) {
          if (!e.length || Array.isArray(e[0]))
            return u2(null, e, i2);
          if ("object" == typeof e[0])
            return u2(r2 || Object.keys(e[0]), e, i2);
        } else if ("object" == typeof e)
          return "string" == typeof e.data && (e.data = JSON.parse(e.data)), Array.isArray(e.data) && (e.fields || (e.fields = e.meta && e.meta.fields || r2), e.fields || (e.fields = Array.isArray(e.data[0]) ? e.fields : "object" == typeof e.data[0] ? Object.keys(e.data[0]) : []), Array.isArray(e.data[0]) || "object" == typeof e.data[0] || (e.data = [e.data])), u2(e.fields || [], e.data || [], i2);
        throw new Error("Unable to serialize unrecognized input");
        function u2(e2, t2, i3) {
          var r3 = "", n3 = ("string" == typeof e2 && (e2 = JSON.parse(e2)), "string" == typeof t2 && (t2 = JSON.parse(t2)), Array.isArray(e2) && 0 < e2.length), s3 = !Array.isArray(t2[0]);
          if (n3 && _2) {
            for (var a3 = 0; a3 < e2.length; a3++)
              0 < a3 && (r3 += m2), r3 += k(e2[a3], a3);
            0 < t2.length && (r3 += y2);
          }
          for (var o3 = 0; o3 < t2.length; o3++) {
            var h3 = (n3 ? e2 : t2[o3]).length, u3 = false, d2 = n3 ? 0 === Object.keys(t2[o3]).length : 0 === t2[o3].length;
            if (i3 && !n3 && (u3 = "greedy" === i3 ? "" === t2[o3].join("").trim() : 1 === t2[o3].length && 0 === t2[o3][0].length), "greedy" === i3 && n3) {
              for (var f2 = [], l2 = 0; l2 < h3; l2++) {
                var c2 = s3 ? e2[l2] : l2;
                f2.push(t2[o3][c2]);
              }
              u3 = "" === f2.join("").trim();
            }
            if (!u3) {
              for (var p2 = 0; p2 < h3; p2++) {
                0 < p2 && !d2 && (r3 += m2);
                var g2 = n3 && s3 ? e2[p2] : p2;
                r3 += k(t2[o3][g2], p2);
              }
              o3 < t2.length - 1 && (!i3 || 0 < h3 && !d2) && (r3 += y2);
            }
          }
          return r3;
        }
        function k(e2, t2) {
          var i3, r3;
          return null == e2 ? "" : e2.constructor === Date ? JSON.stringify(e2).slice(1, 25) : (r3 = false, o2 && "string" == typeof e2 && o2.test(e2) && (e2 = "'" + e2, r3 = true), i3 = e2.toString().replace(h2, a2), (r3 = r3 || true === n2 || "function" == typeof n2 && n2(e2, t2) || Array.isArray(n2) && n2[t2] || ((e3, t3) => {
            for (var i4 = 0; i4 < t3.length; i4++)
              if (-1 < e3.indexOf(t3[i4]))
                return true;
            return false;
          })(i3, v.BAD_DELIMITERS) || -1 < i3.indexOf(m2) || " " === i3.charAt(0) || " " === i3.charAt(i3.length - 1)) ? s2 + i3 + s2 : i3);
        }
      }, v.RECORD_SEP = String.fromCharCode(30), v.UNIT_SEP = String.fromCharCode(31), v.BYTE_ORDER_MARK = "\uFEFF", v.BAD_DELIMITERS = ["\r", "\n", '"', v.BYTE_ORDER_MARK], v.WORKERS_SUPPORTED = !s && !!n.Worker, v.NODE_STREAM_INPUT = 1, v.LocalChunkSize = 10485760, v.RemoteChunkSize = 5242880, v.DefaultDelimiter = ",", v.Parser = E, v.ParserHandle = i, v.NetworkStreamer = f, v.FileStreamer = l, v.StringStreamer = c, v.ReadableStreamStreamer = p, n.jQuery && ((d = n.jQuery).fn.parse = function(o2) {
        var i2 = o2.config || {}, h2 = [];
        return this.each(function(e2) {
          if (!("INPUT" === d(this).prop("tagName").toUpperCase() && "file" === d(this).attr("type").toLowerCase() && n.FileReader) || !this.files || 0 === this.files.length)
            return true;
          for (var t = 0; t < this.files.length; t++)
            h2.push({ file: this.files[t], inputElem: this, instanceConfig: d.extend({}, i2) });
        }), e(), this;
        function e() {
          if (0 === h2.length)
            U(o2.complete) && o2.complete();
          else {
            var e2, t, i3, r2, n2 = h2[0];
            if (U(o2.before)) {
              var s2 = o2.before(n2.file, n2.inputElem);
              if ("object" == typeof s2) {
                if ("abort" === s2.action)
                  return e2 = "AbortError", t = n2.file, i3 = n2.inputElem, r2 = s2.reason, void (U(o2.error) && o2.error({ name: e2 }, t, i3, r2));
                if ("skip" === s2.action)
                  return void u2();
                "object" == typeof s2.config && (n2.instanceConfig = d.extend(n2.instanceConfig, s2.config));
              } else if ("skip" === s2)
                return void u2();
            }
            var a2 = n2.instanceConfig.complete;
            n2.instanceConfig.complete = function(e3) {
              U(a2) && a2(e3, n2.file, n2.inputElem), u2();
            }, v.parse(n2.file, n2.instanceConfig);
          }
        }
        function u2() {
          h2.splice(0, 1), e();
        }
      }), a && (n.onmessage = function(e) {
        e = e.data;
        void 0 === v.WORKER_ID && e && (v.WORKER_ID = e.workerId);
        "string" == typeof e.input ? n.postMessage({ workerId: v.WORKER_ID, results: v.parse(e.input, e.config), finished: true }) : (n.File && e.input instanceof File || e.input instanceof Object) && (e = v.parse(e.input, e.config)) && n.postMessage({ workerId: v.WORKER_ID, results: e, finished: true });
      }), (f.prototype = Object.create(u.prototype)).constructor = f, (l.prototype = Object.create(u.prototype)).constructor = l, (c.prototype = Object.create(c.prototype)).constructor = c, (p.prototype = Object.create(u.prototype)).constructor = p, v;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => KindleVocabPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings/Settings.ts
var DEFAULT_SETTINGS = {
  sortOrder: "timestamp",
  markdownFolderPath: ""
};

// src/settings/SettingTab.ts
var import_obsidian = require("obsidian");
var KindleVocabSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Kindle Vocabulary Sync Settings" });
    new import_obsidian.Setting(containerEl).setName("Sort Order").setDesc("Choose how to sort your markdown file.").addDropdown((drop) => {
      drop.addOption("timestamp", "Newest First (Timestamp)").addOption("unlearned", "Unlearned First");
      drop.setValue(this.plugin.settings.sortOrder || "timestamp");
      drop.onChange(async (value) => {
        this.plugin.settings.sortOrder = value;
        await this.plugin.saveSettings();
        new import_obsidian.Notice(`Sort order set to "${value}"`);
      });
    });
    function isTFolder(f) {
      return f instanceof import_obsidian.TFolder;
    }
    new import_obsidian.Setting(containerEl).setName("Markdown Output Folder").setDesc("Choose the folder to save your markdown file.").addDropdown((drop) => {
      const folders = this.app.vault.getAllLoadedFiles().filter(isTFolder);
      const current = this.plugin.settings.markdownFolderPath || "";
      drop.addOption("", "Vault root");
      for (const folder of folders) {
        drop.addOption(folder.path, folder.path);
      }
      drop.setValue(current);
      drop.onChange(async (value) => {
        this.plugin.settings.markdownFolderPath = value;
        await this.plugin.saveSettings();
        new import_obsidian.Notice(`Markdown folder set to: ${value || "Vault root"}`);
      });
    });
    const sponsorSetting = new import_obsidian.Setting(containerEl).setName("Sponsor").setDesc("Developed and maintained by Truong Gia Bao");
    const coffeeContainer = sponsorSetting.settingEl.createDiv();
    const coffeeButton = coffeeContainer.createEl("a", {
      href: "https://www.buymeacoffee.com/bao-tg"
    });
    coffeeButton.setAttr("target", "_blank");
    const img = coffeeButton.createEl("img", {
      attr: {
        src: "https://cdn.buymeacoffee.com/buttons/v2/default-violet.png",
        alt: "Buy Me a Coffee",
        width: "120",
        height: "35"
      }
    });
  }
};

// src/modals/DatabaseUploadModal.ts
var import_obsidian2 = require("obsidian");
var import_sql_wasm = __toESM(require_sql_wasm());
var DatabaseUploadModal = class extends import_obsidian2.Modal {
  constructor(app) {
    super(app);
    this.allowedExtensions = /* @__PURE__ */ new Set(["db", "sqlite", "db3"]);
    this.targetFolder = `${this.app.vault.configDir}/plugins/kindle-vocab/src/data`;
    this.targetFileName = "vocab.db";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Upload a Vocabulary File (DB)" });
    this.fileInputEl = contentEl.createEl("input", {
      type: "file",
      attr: { accept: ".db,.sqlite,.db3" }
    });
    new import_obsidian2.ButtonComponent(contentEl).setButtonText("Upload").setCta().onClick(() => this.handleUpload());
    new import_obsidian2.ButtonComponent(contentEl).setButtonText("Cancel").onClick(() => this.close());
  }
  async handleUpload() {
    var _a;
    const files = this.fileInputEl.files;
    if (!files || files.length === 0) {
      new import_obsidian2.Notice("No file selected.");
      return;
    }
    const file = files[0];
    const extension = ((_a = file.name.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
    if (!this.allowedExtensions.has(extension)) {
      new import_obsidian2.Notice("Invalid file type. Please upload a valid database file.");
      return;
    }
    try {
      const buffer = new Uint8Array(await file.arrayBuffer());
      const SQL = await (0, import_sql_wasm.default)({
        locateFile: (file2) => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file2}`
      });
      const vault = this.app.vault;
      const filePath = (0, import_obsidian2.normalizePath)(`${this.targetFolder}/${this.targetFileName}`);
      const fileExists = await vault.adapter.exists(filePath);
      if (!fileExists) {
        await this.saveFile(buffer);
        new import_obsidian2.Notice("\u2705 vocab.db uploaded successfully.");
      } else {
        await this.mergeDatabases(SQL, filePath, buffer);
        new import_obsidian2.Notice("\u2705 Database updated (excluding MAIN table).");
      }
    } catch (err) {
      console.error(err);
      new import_obsidian2.Notice("\u274C Error processing the database file.");
    } finally {
      this.close();
    }
  }
  async mergeDatabases(SQL, filePath, newData) {
    var _a, _b;
    const vault = this.app.vault;
    const currentData = await vault.adapter.readBinary(filePath);
    const currentDB = new SQL.Database(new Uint8Array(currentData));
    const newDB = new SQL.Database(newData);
    const tablesRes = newDB.exec(`SELECT name FROM sqlite_master WHERE type='table';`);
    const newTables = ((_b = (_a = tablesRes == null ? void 0 : tablesRes[0]) == null ? void 0 : _a.values) == null ? void 0 : _b.map((row) => row[0]).filter((name) => name !== "MAIN")) || [];
    for (const tableName of newTables) {
      const createSQL = newDB.exec(`SELECT sql FROM sqlite_master WHERE name='${tableName}' AND type='table';`);
      if (createSQL.length === 0)
        continue;
      currentDB.run(`DROP TABLE IF EXISTS ${tableName};`);
      currentDB.run(createSQL[0].values[0][0]);
      const rowsRes = newDB.exec(`SELECT * FROM ${tableName};`);
      if (rowsRes.length === 0)
        continue;
      const { columns, values } = rowsRes[0];
      for (const row of values) {
        const placeholders = row.map(() => "?").join(", ");
        currentDB.run(
          `INSERT INTO ${tableName} (${columns.join(", ")}) VALUES (${placeholders});`,
          row
        );
      }
    }
    const mergedData = currentDB.export();
    await this.saveFile(new Uint8Array(mergedData));
  }
  async saveFile(data) {
    const vault = this.app.vault;
    const folderPath = (0, import_obsidian2.normalizePath)(this.targetFolder);
    const filePath = (0, import_obsidian2.normalizePath)(`${this.targetFolder}/${this.targetFileName}`);
    if (!await vault.adapter.exists(folderPath)) {
      await this.createFolderRecursively(folderPath);
    }
    if (await vault.adapter.exists(filePath)) {
      await vault.adapter.remove(filePath);
    }
    await vault.createBinary(filePath, data);
  }
  async createFolderRecursively(path) {
    const parts = path.split("/");
    let currentPath = "";
    for (const part of parts) {
      currentPath = (0, import_obsidian2.normalizePath)(`${currentPath}/${part}`);
      if (!await this.app.vault.adapter.exists(currentPath)) {
        await this.app.vault.createFolder(currentPath);
      }
    }
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/modals/DictionaryUploadModal.ts
var import_obsidian3 = require("obsidian");
var DictionaryUploadModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
    this.allowedExtensions = /* @__PURE__ */ new Set(["csv"]);
    this.targetFolder = `${this.app.vault.configDir}/plugins/kindle-vocab/src/data`;
    this.targetFileName = "dictionary.csv";
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Upload a Dictionary File (CSV)" });
    this.fileInputEl = contentEl.createEl("input", {
      type: "file",
      attr: { accept: ".csv" }
    });
    new import_obsidian3.ButtonComponent(contentEl).setButtonText("Upload").setCta().onClick(() => this.handleUpload());
    new import_obsidian3.ButtonComponent(contentEl).setButtonText("Cancel").onClick(() => this.close());
  }
  async handleUpload() {
    var _a;
    const files = this.fileInputEl.files;
    if (!files || files.length === 0) {
      new import_obsidian3.Notice("No file selected.");
      return;
    }
    const file = files[0];
    const extension = ((_a = file.name.split(".").pop()) == null ? void 0 : _a.toLowerCase()) || "";
    if (!this.allowedExtensions.has(extension)) {
      new import_obsidian3.Notice("Invalid file type. Please upload a valid CSV file.");
      return;
    }
    const maxSizeMB = 1024;
    if (file.size > maxSizeMB * 1024 * 1024) {
      new import_obsidian3.Notice(`File too large. Max allowed size: ${maxSizeMB}MB.`);
      return;
    }
    try {
      const arrayBuffer = await file.arrayBuffer();
      await this.saveFile(new Uint8Array(arrayBuffer));
      new import_obsidian3.Notice("\u2705 Dictionary uploaded and saved successfully!");
    } catch (err) {
      console.error(err);
      new import_obsidian3.Notice("\u274C Failed to save the dictionary file.");
    } finally {
      this.close();
    }
  }
  async saveFile(data) {
    const vault = this.app.vault;
    const folderPath = (0, import_obsidian3.normalizePath)(this.targetFolder);
    const filePath = (0, import_obsidian3.normalizePath)(`${this.targetFolder}/${this.targetFileName}`);
    if (!await vault.adapter.exists(folderPath)) {
      await this.createFolderRecursively(folderPath);
    }
    if (await vault.adapter.exists(filePath)) {
      await vault.adapter.remove(filePath);
    }
    await vault.createBinary(filePath, data);
  }
  async createFolderRecursively(path) {
    const parts = path.split("/");
    let currentPath = "";
    for (const part of parts) {
      currentPath = (0, import_obsidian3.normalizePath)(`${currentPath}/${part}`);
      if (!await this.app.vault.adapter.exists(currentPath)) {
        await this.app.vault.createFolder(currentPath);
      }
    }
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/modals/SyncDatabaseModal.ts
var import_obsidian6 = require("obsidian");
var Papa = __toESM(require_papaparse_min());
var import_sql_wasm2 = __toESM(require_sql_wasm());

// src/utils/PathHelper.ts
var import_obsidian4 = require("obsidian");
function getVocabDbPath() {
  return (0, import_obsidian4.normalizePath)(`${this.app.vault.configDir}/plugins/kindle-vocab/src/data/vocab.db`);
}
function getDictionaryCsvPath() {
  return (0, import_obsidian4.normalizePath)(`${this.app.vault.configDir}/plugins/kindle-vocab/src/data/dictionary.csv`);
}

// src/utils/MarkdownFormat.ts
var import_sql = __toESM(require_sql_wasm());
var import_obsidian5 = require("obsidian");
async function generateMarkdown(db, sortOrder) {
  var _a, _b, _c, _d;
  let query = `
		SELECT word, context, book_title, information, learned
		FROM MAIN
	`;
  if (sortOrder === "timestamp") {
    query += ` ORDER BY rowid DESC`;
  } else if (sortOrder === "unlearned") {
    query += ` ORDER BY learned ASC, rowid DESC`;
  }
  const result = db.exec(query);
  if (!result.length || !result[0].values.length) {
    return "# Recent Lookups\n\n_(No entries found)_";
  }
  const { columns, values } = result[0];
  const learnedCount = values.filter((row) => row[columns.indexOf("learned")] === 1).length;
  const totalCount = values.length;
  const percent = Math.round(learnedCount / totalCount * 100);
  let md = `# Recent Lookups

\u{1F4D8} You\u2019ve learned **${learnedCount}** out of **${totalCount}** words (${percent}%)

`;
  for (const row of values) {
    const word = ((_a = row[columns.indexOf("word")]) == null ? void 0 : _a.toString().trim()) || "(unknown)";
    const context = ((_b = row[columns.indexOf("context")]) == null ? void 0 : _b.toString().trim()) || "(none)";
    const title = ((_c = row[columns.indexOf("book_title")]) == null ? void 0 : _c.toString().trim()) || "(none)";
    const info = ((_d = row[columns.indexOf("information")]) == null ? void 0 : _d.toString().trim()) || "(none)";
    const learned = row[columns.indexOf("learned")] === 1;
    md += `## ${word}

`;
    md += `- **Context**: ${context}
`;
    md += `- **Book Title**: ${title}
`;
    md += `- **Learned**: <input type="checkbox" data-word="${word}" ${learned ? "checked" : ""} />
`;
    md += `- **Definition**:

${info}

---
`;
  }
  return md;
}
function setupCheckboxListeners(app) {
  const previews = document.querySelectorAll(".markdown-preview-view");
  if (!previews.length) {
    console.warn("[VocabPlugin] No markdown-preview-view found, retrying...");
    setTimeout(() => setupCheckboxListeners(app), 500);
    return;
  }
  const vocabListenerAttached = /* @__PURE__ */ new WeakMap();
  vocabListenerAttached.set(previews, true);
  previews.forEach((el) => {
    el.addEventListener("click", async (e) => {
      const target = e.target;
      if ((target == null ? void 0 : target.tagName) !== "INPUT")
        return;
      const input = target;
      if (input.type !== "checkbox" || !input.dataset.word)
        return;
      const word = input.dataset.word;
      const isLearned = input.checked ? 1 : 0;
      try {
        const SQL = await (0, import_sql.default)({
          locateFile: (file) => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}`
        });
        const dbPath = getVocabDbPath();
        const data = await app.vault.adapter.readBinary(dbPath);
        const db = new SQL.Database(new Uint8Array(data));
        const stmt = db.prepare(`UPDATE MAIN SET learned = ? WHERE word = ?`);
        stmt.run([isLearned, word]);
        stmt.free();
        const updated = db.export();
        await app.vault.adapter.writeBinary(dbPath, updated);
        db.close();
        new import_obsidian5.Notice(`\u2705 ${word} marked as ${isLearned ? "learned" : "unlearned"}`);
      } catch (err) {
        console.error(err);
        new import_obsidian5.Notice("\u274C Failed to update word status.");
      }
    });
  });
}

// src/modals/SyncDatabaseModal.ts
var SyncDatabaseModal = class extends import_obsidian6.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Sync Your Vocabulary Builder" });
    contentEl.createEl("p", {
      text: "This will synchronize your Kindle lookups and create a markdown summary. Make sure your vocab database and dictionary file are ready."
    });
    const buttonContainer = contentEl.createDiv({ cls: "sync-button-container" });
    new import_obsidian6.ButtonComponent(buttonContainer).setButtonText("\u{1F504} Start Sync").setCta().onClick(() => this.syncDatabase());
  }
  async syncDatabase() {
    var _a, _b, _c, _d, _e;
    try {
      new import_obsidian6.Notice("Starting sync...");
      const SQL = await (0, import_sql_wasm2.default)({ locateFile: (file) => `https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.6.2/${file}` });
      const dbPath = getVocabDbPath();
      if (!await this.app.vault.adapter.exists(dbPath)) {
        throw new Error("\u274C Vocab file not found.");
      }
      const arrayBuffer = await this.app.vault.adapter.readBinary(dbPath);
      const db = new SQL.Database(new Uint8Array(arrayBuffer));
      db.run(`
				CREATE TABLE IF NOT EXISTS MAIN (
					word TEXT PRIMARY KEY,
					information TEXT,
					context TEXT,
					book_title TEXT,
					learned INTEGER DEFAULT 0
				)
			`);
      const lookupData = db.exec(`
				SELECT w.word, l.usage, bi.title
				FROM LOOKUPS l
				JOIN WORDS w ON l.word_key = w.id
				JOIN BOOK_INFO bi ON l.book_key = bi.id
			`);
      const lookupRows = lookupData.length ? lookupData[0].values : [];
      let newWordCount = 0;
      const checkExistsStmt = db.prepare(`SELECT 1 FROM MAIN WHERE word = ?`);
      const insertStmt = db.prepare(`
				INSERT INTO MAIN (word, information, context, book_title, learned)
				VALUES (?, '', ?, ?, 0)
			`);
      for (const [word, context, bookTitle] of lookupRows) {
        if (!word)
          continue;
        checkExistsStmt.bind([word]);
        if (!checkExistsStmt.step()) {
          insertStmt.run([word, context || "", bookTitle || ""]);
          newWordCount++;
        }
        checkExistsStmt.reset();
      }
      checkExistsStmt.free();
      insertStmt.free();
      const csvPath = getDictionaryCsvPath();
      if (await this.app.vault.adapter.exists(csvPath)) {
        const csvContent = await this.app.vault.adapter.read(csvPath);
        const rows = await this.parseCsv(csvContent);
        const updateInfoStmt = db.prepare(`UPDATE MAIN SET information = ? WHERE word = ?`);
        for (const [word, info] of rows) {
          updateInfoStmt.run([info, word]);
        }
        updateInfoStmt.free();
      }
      if (!this.plugin.settings)
        await ((_b = (_a = this.plugin).loadSettings) == null ? void 0 : _b.call(_a));
      const sortOrder = ((_c = this.plugin.settings) == null ? void 0 : _c.sortOrder) || "timestamp";
      const markdown = await generateMarkdown(db, sortOrder);
      const folder = ((_e = (_d = this.plugin.settings) == null ? void 0 : _d.markdownFolderPath) == null ? void 0 : _e.trim()) || "";
      const fileName = "My Vocabulary Builder.md";
      const mdPath = (0, import_obsidian6.normalizePath)(folder ? `${folder}/${fileName}` : fileName);
      await this.app.vault.adapter.write(mdPath, markdown);
      const updatedDb = db.export();
      await this.app.vault.adapter.writeBinary(dbPath, updatedDb);
      db.close();
      new import_obsidian6.Notice(`\u2705 Sync complete! ${newWordCount} new word(s) added.`);
      const mdFile = this.app.vault.getAbstractFileByPath(mdPath);
      if (mdFile instanceof import_obsidian6.TFile) {
        await this.app.workspace.getLeaf(true).openFile(mdFile);
        setTimeout(() => setupCheckboxListeners(this.app), 500);
      }
    } catch (err) {
      console.error(err);
      new import_obsidian6.Notice(err.message || "\u274C Sync failed. Check console for details.");
    } finally {
      this.close();
    }
  }
  async parseCsv(content) {
    const parsed = Papa.parse(content, {
      header: false,
      skipEmptyLines: true
    });
    const rows = [];
    for (let i = 1; i < parsed.data.length; i++) {
      const row = parsed.data[i];
      if (row.length >= 2) {
        rows.push([row[0].trim(), row[1].trim()]);
      }
    }
    return rows;
  }
  onClose() {
    this.contentEl.empty();
  }
};

// src/commands/CommandsHandlers.ts
function registerCommands(plugin) {
  plugin.addCommand({
    id: "upload-vocab-database",
    name: "Upload your vocabulary database",
    callback: () => {
      new DatabaseUploadModal(plugin.app).open();
    }
  });
  plugin.addCommand({
    id: "sync-vocabulary-builder",
    name: "Sync the vocabulary builder to your Obsidian",
    callback: () => {
      new SyncDatabaseModal(plugin.app, plugin).open();
    }
  });
  plugin.addCommand({
    id: "upload-dictionary-file",
    name: "Upload your dictionary file",
    callback: () => {
      new DictionaryUploadModal(plugin.app).open();
    }
  });
}

// src/ribbon/RibbonHandlers.ts
function registerRibbons(plugin) {
  const syncRibbon = plugin.addRibbonIcon("book-open", "Sync Kindle Vocabulary", () => {
    new SyncDatabaseModal(plugin.app, this).open();
  });
  syncRibbon.addClass("my-plugin-sync-ribbon");
}

// src/main.ts
var KindleVocabPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEvent(
      this.app.workspace.on("file-open", () => {
        setTimeout(() => setupCheckboxListeners(this.app), 1e3);
      })
    );
    setTimeout(() => setupCheckboxListeners(this.app), 2e3);
    registerRibbons(this);
    registerCommands(this);
    this.addStatusBarItem().setText("Status Bar Text");
    this.addSettingTab(new KindleVocabSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

papaparse/papaparse.min.js:
  (* @license
  Papa Parse
  v5.5.2
  https://github.com/mholt/PapaParse
  License: MIT
  *)
*/
//# sourceMappingURL=data:application/json;base64,
